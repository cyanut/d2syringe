protdic={'C': {'BNLS': {16: {'args': [('DWORD', '', 'Product ID')],
                     'id': 16,
                     'name': 'REQUESTVERSIONBYTE',
                     'remark': '\nThis message requests the latest version byte for a given product.\n The version byte is sent to Battle.net in SID_AUTH_INFO (0x50).\n\n Valid Product IDs are:\n\n 0x01: Starcraft\n 0x02: Starcraft Brood War\n 0x03: Warcraft II Battle.net Edition\n 0x04: Diablo II\n 0x05: Diablo II: Lord of Destruction\n 0x06: Starcraft Japanese\n 0x07: Warcraft III\n 0x08: Warcraft III: The Frozen Throne\n\n JBLS adds these products:\n\n 0x09: Diablo Retail\n 0x0A: Diablo Shareware\n 0x0B: Starcraft Shareware\n\n BNLS# adds this product:\n\n 0x0C: Warcraft III: Demo\n\n',
                     'source': 'C',
                     'type': 'BNLS'},
                24: {'args': [('DWORD', '', 'Product ID'),
                              ('DWORD', '', 'Version DLL digit'),
                              ('DWORD', '', 'Flags'),
                              ('DWORD', '', 'Cookie'),
                              ('STRING', '', 'Checksum formula')],
                     'id': 24,
                     'name': 'VERSIONCHECKEX',
                     'remark': '\nThis message will request a fast version check. Now works with all products.\n Version DLL Digit must be in the range 0-7. (For example, for IX86Ver1.mpq this is 1)\n\n * Valid Product IDs are:\n\n 0x01: Starcraft\n 0x02: Starcraft: Broodwar\n 0x03: Warcraft II: BNE\n 0x04: Diablo II\n 0x05: Diablo II: LoD\n 0x06: Starcraft: Japanese\n 0x07: Warcraft III\n 0x08: Warcraft III: The Frozen Throne\n\n View consts: [pas cpp vb]\n\n ** Currently there are no flags defined so this must be set to zero.\n\n',
                     'source': 'C',
                     'type': 'BNLS'},
                26: {'args': [('DWORD', '', 'Product ID'),
                              ('DWORD', '', 'Flags'),
                              ('DWORD', '', 'Cookie'),
                              ('FILETIME',
                               '',
                               'Timestamp for version check archive'),
                              ('STRING',
                               '',
                               'Version check archive filename'),
                              ('STRING', '', 'Checksum formula')],
                     'id': 26,
                     'name': 'VERSIONCHECKEX2',
                     'remark': '\nThis message will request a fast version check and parses the version check filename so the client does not have to.\nNow works with all products.\n\n * Valid Product IDs are:\n\n 0x01: Starcraft\n 0x02: Starcraft: Broodwar\n 0x03: Warcraft II: BNE\n 0x04: Diablo II\n 0x05: Diablo II: LoD\n 0x06: Starcraft: Japanese\n 0x07: Warcraft III\n 0x08: Warcraft III: The Frozen Throne\n\n View consts: [pas cpp vb]\n\n ** Currently there are no flags defined, this must be set to zero.\n\n',
                     'source': 'C',
                     'type': 'BNLS'}},
       'D2GS': {1: {'args': [('WORD', '', 'X coordinate'),
                             ('WORD', '', 'Y coordinate')],
                    'id': 1,
                    'name': 'WALKTOLOCATION',
                    'remark': '\nWalk to a specified (X,Y) map coordinate.\n\n',
                    'source': 'C',
                    'type': 'D2GS'},
                2: {'args': [('DWORD', '', '*Entity Type'),
                             ('DWORD', '', 'Entity ID')],
                    'id': 2,
                    'name': 'WALKTOENTITY',
                    'remark': "\nMakes your character walk to the Entity specified in Entity ID.\n\n Please note: This message's official name is not known, and has been invented.\n\n",
                    'source': 'C',
                    'type': 'D2GS'},
                3: {'args': [('WORD', '', 'X coordinate'),
                             ('WORD', '', 'Y coordinate')],
                    'id': 3,
                    'name': 'RUNTOLOCATION',
                    'remark': '\nRun to a specified (X,Y) map coordinate. \n\n',
                    'source': 'C',
                    'type': 'D2GS'},
                4: {'args': [('DWORD', '', '*Entity Type'),
                             ('DWORD', '', 'Entity ID')],
                    'id': 4,
                    'name': 'RUNTOENTITY',
                    'remark': "\nMakes your character run to the Entity specified in Entity ID.\n\n Please note: This message's official name is not known, and has been invented.\n\n",
                    'source': 'C',
                    'type': 'D2GS'},
                5: {'args': [('WORD', '', 'X coordinate'),
                             ('WORD', '', 'Y coordinate')],
                    'id': 5,
                    'name': 'LEFTSKILLONLOCATION',
                    'remark': '\nUses Left skill on specified (X,Y) map coordinate.\n\n',
                    'source': 'C',
                    'type': 'D2GS'},
                6: {'args': [('DWORD', '', '*Entity Type'),
                             ('DWORD', '', 'Entity ID')],
                    'id': 6,
                    'name': 'LEFTSKILLONENTITY',
                    'remark': "\nUses your left skill on the Entity specefied in Entity ID.\n\n Please note: This message's official name is not known, and has been invented.\n\n",
                    'source': 'C',
                    'type': 'D2GS'},
                7: {'args': [('DWORD', '', 'Entity Type'),
                             ('DWORD', '', 'Entity ID')],
                    'id': 7,
                    'name': 'LEFTSKILLONENTITYEX',
                    'remark': "\nUses your left skill on the Entity specefied in Entity ID, while holding the hotkey for standing still(shift).\n\n Entity types\n ---------------\n 00 - Players\n 01 - Monsters, NPCs, and Mercenaries\n 02 - Stash, Waypoint, Chests, Portals, others.\n 03 - Missiles\n 04 - Items\n 05 - Entrances\n\n Please note: This message's official name is not known, and has been invented.\n\n",
                    'source': 'C',
                    'type': 'D2GS'},
                8: {'args': [('WORD', '', 'X coordinate'),
                             ('WORD', '', 'Y coordinate')],
                    'id': 8,
                    'name': 'LEFTSKILLONLOCATIONEX',
                    'remark': "\nUses Left skill on specified (X,Y) map coordinate.\n\n This packet is sent repeatedly when the mouse button is held down after the initial packet has been sent. \n\n Please note: This message's official name is not known, and has been invented.\n\n",
                    'source': 'C',
                    'type': 'D2GS'},
                9: {'args': [('DWORD', '', '*Entity Type'),
                             ('DWORD', '', 'Entity ID')],
                    'id': 9,
                    'name': 'LEFTSKILLONENTITYEX2',
                    'remark': "\nUses your left skill on the Entity specified in Entity ID.\n\n This packet is sent repeatedly when the mouse button is held down after the initial packet has been sent.\n\n Please note: This message's official name is not known, and has been invented.\n\n",
                    'source': 'C',
                    'type': 'D2GS'},
                10: {'args': [('DWORD', '', '*Entity Type'),
                              ('DWORD', '', 'Entity ID')],
                     'id': 10,
                     'name': 'LEFTSKILLONENTITYEX3',
                     'remark': '\nUses your left skill on the Entity specefied in Entity ID, while holding the hotkey for standing still(shift).\n\n This packet is sent repeatedly when the mouse button is held down after the initial packet has been sent. \n\n Refer to the D2GS Entity Types document for more information.\n\n',
                     'source': 'C',
                     'type': 'D2GS'},
                12: {'args': [('WORD', '', 'X coordinate'),
                              ('WORD', '', 'Y coordinate')],
                     'id': 12,
                     'name': 'RIGHTSKILLONLOCATION',
                     'remark': "\nUses the currently selected skill at the specified location. \n\n This packet is sent when the location is first clicked with the mouse. \n\n Please note: This message's official name is not known, and has been invented.\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                13: {'args': [('DWORD', '', 'Entity Type'),
                              ('DWORD', '', 'Entity ID')],
                     'id': 13,
                     'name': 'RIGHTSKILLONENTITY',
                     'remark': '\nUses your right skill on the Entity specefied in Entity ID\n\n Refer to the D2GS Entity Types document for more information about Entities\n\n',
                     'source': 'C',
                     'type': 'D2GS'},
                14: {'args': [('DWORD', '', 'Entity Type'),
                              ('DWORD', '', 'Entity ID')],
                     'id': 14,
                     'name': 'RIGHTSKILLONENTITYEX',
                     'remark': "\nUses your right skill on the Entity specefied in Entity ID, while holding the hotkey for standing still(shift).\n\n Please note: This message's official name is not known, and has been invented.\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                15: {'args': [('WORD', '', 'X coordinate'),
                              ('WORD', '', 'Y coordinate')],
                     'id': 15,
                     'name': 'RIGHTSKILLONLOCATIONEX',
                     'remark': "\nUses the currently selected skill at the specified location. \n\n This packet is sent repeatedly when the mouse button is held down after the initial packet has been sent. \n\n Please note: This message's official name is not known, and has been invented.\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                16: {'args': [('DWORD', '', 'Entity Type'),
                              ('DWORD', '', 'Entity ID')],
                     'id': 16,
                     'name': 'RIGHTSKILLONENTITYEX2',
                     'remark': "\nUses your right skill repeatedly on the Entity specefied in Entity ID.\n This packet is sent repeatedly when the mouse button is held down after the initial packet has been sent.\n\n Please note: This message's official name is not known, and has been invented.\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                17: {'args': [('DWORD', '', 'Entity Type'),
                              ('DWORD', '', 'Entity ID')],
                     'id': 17,
                     'name': 'RIGHTSKILLONENTITYEX3',
                     'remark': '\nUses your right skill on the Entity specefied in Entity ID, while holding the hotkey for standing still(shift).\n\n This packet is sent repeatedly when the mouse button is held down after the initial packet has been sent. \n\n',
                     'source': 'C',
                     'type': 'D2GS'},
                19: {'args': [('DWORD', '', 'Entity Type'),
                              ('DWORD', '', 'Entity ID')],
                     'id': 19,
                     'name': 'INTERACTWITHENTITY',
                     'remark': "\nInteracts with the specified Entity. \n For players and npc's, it will send a request to interact. \n The interaction depends on the type of the unit or object. \n For others it will trigger the object, for example using a shrine, looting a corpse you have permission to loot, or\nopening and closing a door.\n\n This packet is always followed by other's that relate to the type of interaction.\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                20: {'args': [('WORD', '', 'Unknown - 0x00, 0x00'),
                              ('STRING', '', 'Message'),
                              ('BYTE', '', 'Unused - 0x00'),
                              ('WORD', '', 'Unknown - 0x00, 0x00')],
                     'id': 20,
                     'name': 'OVERHEADMESSAGE',
                     'remark': '\nThis message is used when you\'d like to put a message above a character\'s head as used in the client as "![message]".\n\n Restrictions: Total size of packet cannot be greater than 275 bytes. Message cannot be greater than 255 bytes. \n\n Please note: This message\'s official name is not known, and has been invented. \n\n Extra Info: The status of this information is: Public Colors can be created by adding hex FF 63 and a character 30 to\n3C. \n\n Example:\n To make red, use FF 63 31.\n\n',
                     'source': 'C',
                     'type': 'D2GS'},
                21: {'args': [('BYTE', '', 'Message Type'),
                              ('BYTE', '', 'Unknown'),
                              ('STRING', '', 'Message'),
                              ('BYTE', '', 'Unknown'),
                              ('WORD',
                               '',
                               'Unknown - Only if normal chat'),
                              ('STRING',
                               '',
                               'Player to whisper to - Only if whispering'),
                              ('BYTE', '', 'Unknown - Only if whispering')],
                     'id': 21,
                     'name': 'CHATMESSAGE',
                     'remark': "\nSends a chat message in the game.\n\n Possible Message Types:\n 0x01 - Send to all\n 0x02 - Whisper\n\n Please note: This message's official name is not known, and has been invented.\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                22: {'args': [('DWORD', '', 'Unit Type'),
                              ('DWORD', '', 'Unit ID'),
                              ('DWORD', '', 'Action ID')],
                     'id': 22,
                     'name': 'PICKUPITEM',
                     'remark': "\nPick up a ground item to cursor buffer/inventory.\n\n Possible action IDs:\n 0x00 - Move item to inventory\n 0x01 - Move item to cursor buffer \n\n Please note: This message's official name is not known, and has been invented. \n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                23: {'args': [('DWORD', '', 'Item ID')],
                     'id': 23,
                     'name': 'DROPITEM',
                     'remark': "\nDrops the item in the player's cursor buffer to the ground. \n\n Please note: This message's official name is not known, and has been invented.\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                24: {'args': [('DWORD', '', 'Item ID'),
                              ('DWORD', '', 'X coordinate'),
                              ('DWORD', '', 'Y coordinate'),
                              ('DWORD', '', 'Buffer Type')],
                     'id': 24,
                     'name': 'ITEMTOBUFFER',
                     'remark': "\nMoves item from the player's cursor buffer to an inventory space.\n\n Please note: This message's official name is not known, and has been invented. \n\n Inventory coordinates:\n (0,0) - Top left\n (9,3) - Bottom right\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                25: {'args': [('DWORD', '', 'Item ID')],
                     'id': 25,
                     'name': 'PICKUPBUFFERITEM',
                     'remark': "\nPickup an item from the possible buffers below, moving it to the cursor buffer.\n\n Possible Buffers:\n 0 - Inventory\n 1 - NPC Trade & Other player's Trade Window?\n 2 - Trade Screen\n 3 - Horadric Cube\n 4 - Stash\n\n Please note: This message's official name is not known, and has been invented.\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                26: {'args': [('DWORD', '', 'Item ID'),
                              ('DWORD', '', 'Body Location')],
                     'id': 26,
                     'name': 'ITEMTOBODY',
                     'remark': "\nMoves item from player's cursor buffer to body location. Body locations are identified by the line number in the data\nfile bodylocs.txt.\n\n Possible Body Locations:\n 0x01 - Helm\n 0x02 - Amulet\n 0x03 - Armor\n 0x04 - Left-hand weapon\n 0x05 - Right-hand weapon\n 0x06 - Left-hand ring\n 0x07 - Right-hand ring\n 0x08 - Belt\n 0x09 - Boots\n 0x0A - Gloves\n\n These values have been recorded for mercenary body locations, but aren't confirmed: (Note, each location ID is\nprefixed with 0x61)\n Example: 1A 64 00 00 00 61 02 00 00 (Move item 0x64 to Mercenary Right-hand weapon)\n\n 0x01 - Mercenary Helm\n 0x02 - Mercenary Right-hand Weapon\n 0x03 - Mercenary Armor\n 0x04 - Mercenary Left-hand Weapon \n\n Please note: This message's official name is not known, and has been invented.\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                27: {'args': [('DWORD', '', 'Item ID'),
                              ('DWORD', '', 'Body Location')],
                     'id': 27,
                     'name': 'SWAP2HANDEDITEM',
                     'remark': "\nMoves item from body location to player's cursor buffer.\n\n Body locations are the same as in D2GS_ITEMTOBODY\n\n Please note: This message's official name is not known, and has been invented. \n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                28: {'args': [('WORD', '', 'Body Location')],
                     'id': 28,
                     'name': 'PICKUPBODYITEM',
                     'remark': "\nPickup an item from a Body Location to you're cursor buffer.\n\n Possible Body Locations:\n 0x01 - Helm\n 0x02 - Amulet\n 0x03 - Armor\n 0x04 - Left-hand weapon\n 0x05 - Right-hand weapon\n 0x06 - Left-hand ring\n 0x07 - Right-hand ring\n 0x08 - Belt\n 0x09 - Boots\n 0x0A - Gloves\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                29: {'args': [('DWORD', '', 'Item ID'),
                              ('DWORD', '', 'Body Location')],
                     'id': 29,
                     'name': 'SWITCHBODYITEM',
                     'remark': "\nSwaps item in player's cursor buffer with item in the body location.\n\n Possible Body Locations:\n 0x01 - Helm\n 0x02 - Amulet\n 0x03 - Armor\n 0x04 - Left-hand weapon\n 0x05 - Right-hand weapon\n 0x06 - Left-hand ring\n 0x07 - Right-hand ring\n 0x08 - Belt\n 0x09 - Boots\n 0x0A - Gloves\n\n Please note: This message's official name is not known, and has been invented. \n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                31: {'args': [('DWORD',
                               '',
                               'Item ID - Item to place in inventory (cursor buffer)'),
                              ('DWORD',
                               '',
                               'Item ID - Item to be replaced'),
                              ('DWORD', '', 'X coordinate for replace'),
                              ('DWORD', '', 'Y coordinate for replace')],
                     'id': 31,
                     'name': 'SWITCHINVENTORYITEM',
                     'remark': "\nSwaps the item in the player's cursor buffer with one in the player's inventory. Please note: \n This message's official name is not known, and has been invented.\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                32: {'args': [('DWORD', '', 'Item ID'),
                              ('DWORD', '', 'X coordinate'),
                              ('DWORD', '', 'Y coordinate')],
                     'id': 32,
                     'name': 'USEITEM',
                     'remark': "\nUses the specified item (such as a potion, town portal scroll, etc.).\n\n Please note: This message's official name is not known, and has been invented.\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                33: {'args': [('DWORD', '', 'Item ID - Stack item'),
                              ('DWORD', '', 'Item ID - Target item')],
                     'id': 33,
                     'name': 'STACKITEM',
                     'remark': "\nStacks one item such as a key onto another item.\n\n Please note: This message's official name is not known, and has been invented.\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                34: {'args': [('DWORD', '', 'Item ID')],
                     'id': 34,
                     'name': 'REMOVESTACKITEM',
                     'remark': "\nRemoves an item from the stack Please note: This message's official name is not known, and has been invented. The\ncontents of this packet may be incomplete or incorrect, and your comments and contributions are requested.\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                35: {'args': [('DWORD', '', 'Item ID'),
                              ('DWORD', '', 'Belt Location')],
                     'id': 35,
                     'name': 'ITEMTOBELT',
                     'remark': "\nMoves an item into the player's belt.\n\n Extra Info: The status of this information is: Public Belt locations start at 0x00 and go from right to left, starting\nat the lowest row and moving across, then going up one row. For example, location 0x03 would be at the bottom right hand\ncorner and location 0x0C would be at the top left corner in a 4-slot belt. This can be calculated as (row*4+column).\n\n Please note: This message's official name is not known, and has been invented.\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                36: {'args': [('DWORD', '', 'Item ID')],
                     'id': 36,
                     'name': 'REMOVEBELTITEM',
                     'remark': "\nMoves the specified item from the belt to the player's cursor buffer. \n\n Please note: This message's official name is not known, and has been invented.\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                37: {'args': [('DWORD', '', 'Item ID - Cursor buffer'),
                              ('DWORD',
                               '',
                               'Item ID - Item to be replaced')],
                     'id': 37,
                     'name': 'SWITCHBELTITEM',
                     'remark': "\nReplaces item in belt with item in player's cursor buffer.\n\n Please note: This message's official name is not known, and has been invented.\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                38: {'args': [('DWORD', '', 'Item ID'),
                              ('DWORD', '', 'Unknown - Possibly unused'),
                              ('DWORD', '', 'Unknown - Possibly unused')],
                     'id': 38,
                     'name': 'USEBELTITEM',
                     'remark': "\nUses the specified item in the player's belt.\n\n Please note: This message's official name is not known, and has been invented.\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                40: {'args': [('DWORD',
                               '',
                               'Item ID - Item to place in socket'),
                              ('DWORD', '', 'Item ID - Socketed item')],
                     'id': 40,
                     'name': 'INSERTSOCKETITEM',
                     'remark': '\nInserts the specified item into a socketed item.\n\n',
                     'source': 'C',
                     'type': 'D2GS'},
                41: {'args': [('DWORD', '', 'Item ID - Scroll'),
                              ('DWORD', '', 'Item ID - Tome')],
                     'id': 41,
                     'name': 'SCROLLTOTOME',
                     'remark': "\nPlaces a scroll into a tome of scrolls.\n\n Note: This message's official name is not known, and has been invented.\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                42: {'args': [('DWORD', '', 'Item ID'),
                              ('DWORD', '', 'Cube ID')],
                     'id': 42,
                     'name': 'ITEMTOCUBE',
                     'remark': "\nMoves item from player's cursor buffer into Horadric cube.\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                45: {'args': [],
                     'id': 45,
                     'name': 'UNSELECTOBJ',
                     'remark': "\nUnselects the selected object. Please note: This message's official name is not known, and has been invented. The\ncontents of this packet may be incomplete or incorrect, and your comments and contributions are requested.\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                47: {'args': [('DWORD', '', 'Entity Type'),
                              ('DWORD', '', 'Entity ID')],
                     'id': 47,
                     'name': 'NPCINIT',
                     'remark': "\nInitiate an NPC sesstion, sent following:\n C->S 0x13\n It indicates that you are now interacting with an NPC, and a dialog window is opened.\n\n This is prior to any choices being made to talk or trade etc.\n\n Please note: This message's official name is not known, and has been invented.\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                48: {'args': [('DWORD', '', 'Entity Type'),
                              ('DWORD', '', 'NPC ID')],
                     'id': 48,
                     'name': 'NPCCANCEL',
                     'remark': "\nStops interacting with an NPC \n\n Please note: This message's official name is not known, and has been invented.\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                50: {'args': [('DWORD', '', 'NPC ID - Unconfirmed'),
                              ('DWORD', '', 'Item ID - Unconfirmed'),
                              ('DWORD', '', 'Buffer Type - Unconfirmed'),
                              ('DWORD', '', 'Cost')],
                     'id': 50,
                     'name': 'NPCBUY',
                     'remark': "\nBuys an item from a Non Player Character.\n\n Possible Buffer Types:\n 0x00 - Regular (ordinary item)\n 0x02 - Gambled \n\n Please note: This message's official name is not known, and has been invented.\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                51: {'args': [('DWORD', '', 'NPC ID - Unconfirmed'),
                              ('DWORD', '', 'Item ID - Unconfirmed'),
                              ('DWORD',
                               '',
                               'Buffer ID - Unconfirmed - Possible value 0x04'),
                              ('DWORD', '', 'Cost')],
                     'id': 51,
                     'name': 'NPCSELL',
                     'remark': "\nSell an item to a Non Player Character. \n\n The Buffer ID refers to the windows in the NPC trade screen, depending on what you are selling the Buffer ID will\nmatch the item type.\n After selling the item it will appear in the given Buffer ID.\n\n Please note: This message's official name is not known, and has been invented.\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                56: {'args': [('DWORD', '', 'Trade Type - Unconfirmed'),
                              ('DWORD', '', 'NPC ID - Unconfirmed'),
                              ('DWORD',
                               '',
                               'Unknown - Unconfirmed - Possible value 0x00')],
                     'id': 56,
                     'name': 'NPCTRADE',
                     'remark': "\nThis packet's use is currently unconfirmed.\n\n Possible Trade Types:\n 0x01 - Trade\n 0x02 - Gamble\n\n Please note: This message's official name is not known, and has been invented.\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                63: {'args': [('WORD', '', 'Phrase ID')],
                     'id': 63,
                     'name': 'CHARACTERPHRASE',
                     'remark': '\nAll phrases sent to the server will be heard by all players in your vicinity.\n\n Phrase IDs: (Note: The deciding of which of the two phrases are used is random)\n [0x19] "Help!" / "Help me!"\n [0x1A] "Follow me!" / "Come on!"\n [0x1B] "This is yours." / "This is for you."\n [0x1C] "Thanks!" / "Thank you."\n [0x1D] "Uh, oops." / "Forgive me."\n [0x1E] "Bye!" / "Good Bye!"\n [0x1F] "Die!" / "Time to die!"\n [0x20] "Run!" / "Run away!" Please note: This message\'s official name is not known, and has been invented.\n\n',
                     'source': 'C',
                     'type': 'D2GS'},
                73: {'args': [('BYTE', '', 'Waypoint ID'),
                              ('BYTE',
                               '',
                               'Unknown - Appears to be random'),
                              ('WORD', '', 'Unknown - 0x00'),
                              ('BYTE', '', 'Level number'),
                              ('WORD', '', 'Unknown - 0x00')],
                     'id': 73,
                     'name': 'WAYPOINT',
                     'remark': "\nRequests to go to a waypoint if it was already activated.\n\n Please note: This message's official name is not known, and has been invented.\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                79: {'args': [('DWORD', '', 'Request ID'),
                              ('WORD', '', 'Gold Amount')],
                     'id': 79,
                     'name': 'TRADE',
                     'remark': "\nThis message should be used for manipulating the trading window, the Horadric Cube item window, and the Stash window.\n\n Possible Request ID's:\n [0x02] Cancel trade request\n [0x03] Accept trade request\n [0x04] Press Accept button (accept)\n [0x07] Press Accept button (unaccept) - This should be sent when placing items in the trade window as well.\n [0x08] Refresh window (See below for examples on usage)\n [0x12] Close stash window\n [0x13] Move gold (stash to inventory)\n [0x14] Move gold (inventory to stash)\n [0x17] Close Horadric Cube window\n\n Examples of using Refresh ID:\n Item has been picked up to mouse cursor buffer.\n Item has been placed in the trade screen.\n Accepted or closed a trade window.\n Manual unclick of Accept button.\n\n Please note: This message's official name is not known, and has been invented.\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                80: {'args': [('DWORD', '', 'PlayerID'),
                              ('DWORD', '', 'GoldAmount')],
                     'id': 80,
                     'name': 'DROPGOLD',
                     'remark': "\nDrops a pile of gold to the ground. \n\n Please note: This message's official name is not known, and has been invented.\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                94: {'args': [('WORD', '', 'Action ID'),
                              ('DWORD', '', 'Player ID')],
                     'id': 94,
                     'name': 'PARTY',
                     'remark': '\nPossible Action IDs:\n\n 0x06 - Invite player to party with you\n 0x07 - Cancel invite to player\n 0x08 - Accept invite from player\n 0x09 - Leave party\n\n',
                     'source': 'C',
                     'type': 'D2GS'},
                97: {'args': [('WORD', '', 'Unknown - 0x00')],
                     'id': 97,
                     'name': 'POTIONTOMERCENARY',
                     'remark': "\nTakes the potion your cursor holds and gives it to the mercenary. Please note: This message's official name is not\nknown, and has been invented.\n\n",
                     'source': 'C',
                     'type': 'D2GS'},
                104: {'args': [('DWORD', '', 'D2GS Server Hash'),
                               ('WORD', '', 'D2GS Server Token'),
                               ('BYTE', '', 'Character ID'),
                               ('DWORD',
                                '',
                                'Version byte (Currently 0x0B)'),
                               ('DWORD',
                                '',
                                'Unknown - Suggested Const (0xED5DCC50)'),
                               ('DWORD',
                                '',
                                'Unknown - Suggested Const (0x91A519B6)'),
                               ('BYTE', '', 'Unknown - Suggested (0x00)'),
                               ('STRING', '', 'Character name'),
                               ('VOID', '', '*See user-comment below')],
                      'id': 104,
                      'name': 'GAMELOGON',
                      'remark': '\nPossible Character IDs:\n 0x00 - Amazon\n 0x01 - Sorceress\n 0x02 - Necromancer\n 0x03 - Paladin\n 0x04 - Barbarian\n 0x05 - Druid\n 0x06 - Assassin\n\n The "Character name" field is a buffer of 15 characters with a null-terminator. This string should always be filled\nwith 15 characters (plus terminator), padded with 0\'s for unused bytes.\n\n Note: If the character ID does not match the type of character you\'re attempting to logon with, and the character is\nnealy created (with 0 play time), then that character will automatically be changed or "morphed" into the character ID\nsent. \n Please note: This message\'s official name is not known, and has been invented.\n\n',
                      'source': 'C',
                      'type': 'D2GS'},
                106: {'args': [],
                      'id': 106,
                      'name': 'ENTERGAMEENVIRONMENT',
                      'remark': "\nThis byte should be sent in order to start receiving in-game messages and to interact with the world itself. \n\n Please note: This message's official name is not known, and has been invented.\n\n",
                      'source': 'C',
                      'type': 'D2GS'},
                109: {'args': [('DWORD', '', 'Tick Count'),
                               ('DWORD', '', 'Null'),
                               ('DWORD', '', 'Null')],
                      'id': 109,
                      'name': 'PING',
                      'remark': "\nThis packet should be sent every five to seven seconds to avoid timeout.\n\n Please note: This message's official name is not known, and has been invented.\n\n",
                      'source': 'C',
                      'type': 'D2GS'}},
       'MCP': {1: {'args': [('DWORD', '', 'MCP Cookie'),
                            ('DWORD', '', 'MCP Status'),
                            ('DWORD', '', '[2] MCP Chunk 1'),
                            ('DWORD', '', '[12] MCP Chunk 2'),
                            ('STRING', '', 'Battle.net Unique Name')],
                   'id': 1,
                   'name': 'STARTUP',
                   'remark': "\nThis packet authenticates the client with the MCP and allows character querying and logon to proceed.\n All 16 DWORDs (Cookie, Status, Chunk 1, and Chunk 2) are received from the server via SID_LOGONREALMEX.\n\n Not much information is known about the DWORD values, other than that they're received from the server. The following\ninformation needs work:\n  MCP Cookie: Client Token MCP Status: Unknown MCP Chunk 1 [01]: Server IP (BNCS) MCP Chunk 1 [02]: UDP Value * MCP\nChunk 2 [01]: Unknown MCP Chunk 2 [02]: Unknown MCP Chunk 2 [03]: Something to do with the gateway MCP Chunk 2 [04]:\nProduct (D2DV/D2XP) MCP Chunk 2 [05]: Platform (IX86/PMAC/XMAC) MCP Chunk 2 [06]: Unknown MCP Chunk 2 [07]: Language ID\n(1033 [0x409] for enUS) MCP Chunk 2 [08]: Unknown MCP Chunk 2 [09]: Unknown MCP Chunk 2 [10]: Unknown MCP Chunk 2 [11]:\nUnknown MCP Chunk 2 [12]: Unknown  \n This is purely speculation, but as there are 5 unknown DWORDs at the end of this chunk, it is possible that it is\nactually a hash of something.\n\n * UDPValue: No one really knows what this is, however, it is used in 2nd DWORD of the UDP packet PKT_CONNTEST2. The\nclient receives it in SID_AUTH_INFO.\n\n",
                   'source': 'C',
                   'type': 'MCP'},
               2: {'args': [('DWORD', '', 'Character class'),
                            ('WORD', '', 'Character flags'),
                            ('STRING', '', 'Character name')],
                   'id': 2,
                   'name': 'CHARCREATE',
                   'remark': "\nCreates a character on the Realm.\n\n Character Classes are the same as in D2 users' Statstrings:\n 0x00: Amazon\n 0x01: Sorceress\n 0x02: Necromancer\n 0x03: Paladin\n 0x04: Barbarian\n 0x05: Druid\n 0x06: Assassin Flag values should be OR'd together. The only flags that can be set for character creation are classic,\nhardcore, expansion, and ladder, but the other flags are included here for completeness:\n 0x00: Classic\n 0x04: Hardcore\n 0x08: Dead\n 0x20: Expansion\n 0x40: Ladder Sending 0x05 or 0x06 in character class or 0x20 in character flags while on D2DV will disconnect and\ntemporarily ban you from the realm. Likewise, sending 0x05 or 0x06 in character class without setting 0x20 in character\nflags will result in a disconnect and ban.\n\n",
                   'source': 'C',
                   'type': 'MCP'},
               3: {'args': [('WORD', '', 'Request Id '),
                            ('DWORD', '', 'Difficulty'),
                            ('BYTE', '', 'Unknown - 1'),
                            ('BYTE', '', 'Player difference '),
                            ('BYTE', '', 'Maximum players'),
                            ('STRING', '', 'Game name'),
                            ('STRING', '', 'Game password'),
                            ('STRING', '', 'Game description')],
                   'id': 3,
                   'name': 'CREATEGAME',
                   'remark': '\n Difficulty: 0x0000: Normal 0x1000: Nightmare 0x2000: Hell  \n * This value starts at 0x02 at first game creation, and increments by 0x02 each consecutive game creation.\n\n ** A value of 0xFF indicates that the game is not restricted by character difference.\n\n Before sending the game name and password, Diablo II automatically changes their case. For example if the string "aBc\nDeF" is typed in Diablo II, then the string sent is "Abc Def". This does not apply to the game description.\n\n',
                   'source': 'C',
                   'type': 'MCP'},
               4: {'args': [('WORD', '', 'Request ID'),
                            ('STRING', '', 'Game name'),
                            ('STRING', '', 'Game Password')],
                   'id': 4,
                   'name': 'JOINGAME',
                   'remark': '\nThis must be sent after a successful game creation.\n\n',
                   'source': 'C',
                   'type': 'MCP'},
               5: {'args': [('WORD', '', 'Request ID'),
                            ('DWORD', '', 'Unknown (0)'),
                            ('STRING', '', 'Search String ')],
                   'id': 5,
                   'name': 'GAMELIST',
                   'remark': '\nRequests a game listing.\n\n * Normally blank. If a non-empty string is sent, games will be returned that include this string in their names. This\nis not used by the client, but still exists.\n\n',
                   'source': 'C',
                   'type': 'MCP'},
               6: {'args': [('WORD', '', 'Request ID'),
                            ('STRING', '', 'Game name')],
                   'id': 6,
                   'name': 'GAMEINFO',
                   'remark': '\nRequests information about a game.\n\n',
                   'source': 'C',
                   'type': 'MCP'},
               7: {'args': [('STRING', '', 'Character name')],
                   'id': 7,
                   'name': 'CHARLOGON',
                   'remark': '\nLogs onto the realm.\n\n Note that attempting to log on using an expansion character on D2DV will result in an IPBan by both Battle.net and the\nRealm.\n\n',
                   'source': 'C',
                   'type': 'MCP'},
               10: {'args': [('WORD', '', 'Unknown (0)'),
                             ('STRING', '', 'Character name')],
                    'id': 10,
                    'name': 'CHARDELETE',
                    'remark': '\nDeletes a character.\n\n',
                    'source': 'C',
                    'type': 'MCP'},
               17: {'args': [('BYTE', '', 'Ladder type'),
                             ('WORD', '', 'Starting position')],
                    'id': 17,
                    'name': 'REQUESTLADDERDATA',
                    'remark': "\nThis will request 16 ladder entries, starting at a zero-based location specified in 'Starting position'. For example if\nthis is 0, then ladder entries 1-16 are retrieved. If this is 17, then ladder entries 18-33 are retrieved. Note: The\nvalues that Diablo 2 sends for this are always perfectly divisible by 16. This might be a requirement.\n  Possible ladder types: 0x00: standard hardcore overall ladder 0x01: standard hardcore amazon ladder 0x02: standard\nhardcore sorceress ladder 0x03: standard hardcore necromancer ladder 0x04: standard hardcore paladin ladder 0x05:\nstandard hardcore barbarian ladder 0x09: standard softcore overall ladder 0x0A: standard softcore amazon ladder 0x0B:\nstandard softcore sorceress ladder 0x0C: standard softcore necromancer ladder 0x0D: standard softcore paladin ladder\n0x0E: standard softcore barbarian ladder 0x13: expansion hardcore overall ladder 0x14: expansion hardcore amazon ladder\n0x15: expansion hardcore sorceress ladder 0x16: expansion hardcore necromancer ladder 0x17: expansion hardcore paladin\nladder 0x18: expansion hardcore barbarian ladder 0x19: expansion hardcore druid ladder 0x1A: expansion hardcore assassin\nladder 0x1B: expansion softcore overall ladder 0x1C: expansion softcore amazon ladder 0x1D: expansion softcore sorceress\nladder 0x1E: expansion softcore necromancer ladder 0x1F: expansion softcore paladin ladder 0x20: expansion softcore\nbarbarian ladder 0x21: expansion softcore druid ladder 0x22: expansion softcore assassin ladder \n\n",
                    'source': 'C',
                    'type': 'MCP'},
               18: {'args': [],
                    'id': 18,
                    'name': 'MOTD',
                    'remark': "\nRequests the realm's MOTD.\n\n",
                    'source': 'C',
                    'type': 'MCP'},
               19: {'args': [],
                    'id': 19,
                    'name': 'CANCELGAMECREATE',
                    'remark': '\nNotifies the server that you want to cancel the creation of your game.\n\n',
                    'source': 'C',
                    'type': 'MCP'},
               22: {'args': [('DWORD', '', 'Hardcore BOOL'),
                             ('DWORD', '', 'Expansion BOOL'),
                             ('STRING', '', 'Character Name')],
                    'id': 22,
                    'name': 'CHARRANK',
                    'remark': '\nThis packet is used to find a Diablo II character in the ladder. Hardcore and Expansion can either be 1 or 0 and define\nthe ladder type (always Overall). The server responds with MCP_REQUESTLADDERDATA, listing (and possibly highlighting\nusing character flag 0x08?) the page of ranks in which the character is found.\n\n',
                    'source': 'C',
                    'type': 'MCP'},
               23: {'args': [('DWORD', '', 'Number of characters to list')],
                    'id': 23,
                    'name': 'CHARLIST',
                    'remark': '\nRequests a character list.\n\n',
                    'source': 'C',
                    'type': 'MCP'},
               24: {'args': [('STRING', '', 'Character Name')],
                    'id': 24,
                    'name': 'CHARUPGRADE',
                    'remark': '\nConverts a non-expansion character to expansion.\n\n',
                    'source': 'C',
                    'type': 'MCP'},
               25: {'args': [('DWORD', '', 'Number of characters to list')],
                    'id': 25,
                    'name': 'CHARLIST2',
                    'remark': '\nRequests a character list. \n\n Up to a maximum of 8 characters can be requested.\n\n',
                    'source': 'C',
                    'type': 'MCP'}},
       'SID': {0: {'args': [],
                   'id': 0,
                   'name': 'NULL',
                   'remark': '\nKeeps the connection alive. This message should be sent to the server every 8 minutes (approximately).\n\n The server will send this to you automatically, you do not have to reply to it. You should send this on your own\nnever-ending timer for at least as often as Battle.net does (give or take a few seconds).\n\n This packet is used to detect if your TCP connection has gone dead, to the point where you will never receive data\nfrom the server ever again until you reconnect your connection. A situation such as this can be created by unplugging\nyour internet connection for a few minutes, or if your internet is dropped for whatever reason.\n\n',
                   'source': 'C',
                   'type': 'SID'},
               2: {'args': [],
                   'id': 2,
                   'name': 'STOPADV',
                   'remark': '\nThis message is sent to inform the server that a game should no longer be advertised to other users. It is sent when a\ngame starts, or when a game is aborted (the host leaves).\n\n All Battle.snp clients (DRTL, DSHR, STAR/SEXP, JSTR, SSHR, and W2BN) always send this message when logging off, even\nif it not in a game.\n\n',
                   'source': 'C',
                   'type': 'SID'},
               9: {'args': [('WORD', '', 'Game Type'),
                            ('WORD', '', 'Sub Game Type'),
                            ('DWORD', '', 'Viewing Filter'),
                            ('DWORD', '', 'Reserved (0)'),
                            ('DWORD', '', 'Number of Games'),
                            ('STRING', '', 'Game Name'),
                            ('STRING', '', 'Game Password'),
                            ('STRING', '', 'Game Statstring')],
                   'id': 9,
                   'name': 'GETADVLISTEX',
                   'remark': "\nRetrieves a list of games.\n\n GAME TYPE: For STAR/SEXP/SSHR/JSTR and W2BN, a value of 0 indicates that any type is acceptable.\n  Possible game types: 0x00: All 0x02: Melee 0x03: Free for all 0x04: one vs one 0x05: CTF 0x06: Greed 0x07: Slaughter\n0x08: Sudden Death 0x09: Ladder 0x10: Iron man ladder 0x0A: Use Map Settings 0x0B: Team Melee 0x0C: Team FFA 0x0D: Team\nCTF 0x0F: Top vs. Bottom  \n For DRTL/DSHR, Game Type is used to specify a 'level range'. This ensures that clients receive a list of games\ncontaining players whose experience is similar to their own.\n  Possible ranges: 0x00: Level 1 0x01: 2 - 3 0x02: 4 - 5 0x03: 6 - 7 0x04: 8 - 9 0x05: 10 - 12 0x06: 13 - 16 0x07: 17 -\n19 0x08: 20 - 24 0x09: 25 - 29 0x0A: 30 - 34 0x0B: 35 - 39 0x0C: 40 - 47 0x0D: 48 - 50  For all other games, Game Type\ncan be set to 0x00. SUB GAME TYPE:  For Greed, this is resources in multiples of 2500 (0x01 = 2500, 0x02 = 5000, etc).\nFor Slaughter, this is minutes in multiples of 15 (0x01 = 15, 0x02 = 30, etc). For Ladder, this indicates if disconnects\ncount as a loss (0x01 = Yes, 0x00 = No). For Team Melee, this is the number of teams (0x01 = 2, 0x02 = 3, etc). For Team\nFree For All, this is the number of teams (0x01 = 2, 0x02 = 3, etc). For Team Capture The Flag, this is the number of\nteams (0x01 = 2, 0x02 = 3, etc). For Top vs. Bottom, this is the players to team ratio (1-7). For any other game type,\nit is 0x01 which indicates no sub game type.  VIEWING FILTER:  0xFFFF is used to use the combination of values in this\npacket. 0xFF80 is used to show all games. For STAR/SEXP/SSHR/JSTR, viewing filter is set to 0x30. For DRTL/DSHR, viewing\nfilter is set to 0xFFFF by the game, but setting it to 0x00 will disable any viewing limitations, letting you view all\ngames.  RESERVED (0): This value is hardcoded to 0x00 by all games. NUMBER OF GAMES: This is the number of games to\nlist. For a full listing, it's safe to use 0xFF. By default, DRTL/DSHR sets this to 0x19.\n\n",
                   'source': 'C',
                   'type': 'SID'},
               10: {'args': [('STRING', '', 'Username '),
                             ('STRING', '', 'Statstring ')],
                    'id': 10,
                    'name': 'ENTERCHAT',
                    'remark': '\nJoins Chat. \n\n * Null on WAR3/W3XP.\n\n ** Null on CDKey Products, except for D2DV and D2XP when on realm characters..\n\n',
                    'source': 'C',
                    'type': 'SID'},
               11: {'args': [('DWORD', '', 'Product ID')],
                    'id': 11,
                    'name': 'GETCHANNELLIST',
                    'remark': "\nRequests a list of channels that the client is permitted to enter.\n\n In the past this packet returned a product list for the specified Product ID, however, the Product ID field is now\nignored -- it does not need to be a valid Product ID, and can be set to zero. The list of channels returned will be for\nthe client's product, as specified during the client's logon.\n\n",
                    'source': 'C',
                    'type': 'SID'},
               12: {'args': [('DWORD', '', 'Flags'),
                             ('STRING', '', 'Channel')],
                    'id': 12,
                    'name': 'JOINCHANNEL',
                    'remark': "\nJoins a channel after entering chat.\n\n The Channel name must be no greater than 31 characters, otherwise it becomes trimmed by Battle.net.\n\n The flags field may contain the following values:\n 0x00: NoCreate join\n 0x01: First join\n 0x02: Forced join\n 0x05: D2 first join\n\n NoCreate Join: This will only join the channel specified if it is not empty, and is used by clients when selecting a\nchannel from the channels menu. If the channel is empty, Battle.net sends a SID_CHATEVENT of type\nEID_CHANNELDOESNOTEXIST, upon which official clients prompt for confirmation that the user wishes to create the channel,\nin which case, it resends this packet with Flags set to Forced Join (0x02). First Join: Places user in a channel\nstarting with their product and country, followed by a number, ie 'Brood War GBR-1'. Also automatically sends MOTD after\nentering the channel. When using this type, the Channel variable has no effect, but must be present anyway to avoid an\nIP ban. This is sent when first logging onto Battle.net Forced Join: This is sent when leaving a game, and joins the\nspecified channel without an supplying an MOTD. D2 First Join: The same as First join, but is used for D2DV/D2XP\nclients.\n\n",
                    'source': 'C',
                    'type': 'SID'},
               14: {'args': [('STRING', '', 'Text ')],
                    'id': 14,
                    'name': 'CHATCOMMAND',
                    'remark': '\nSend text or a command to Battle.net using this packet.\n\n For STAR/SEXP/SSHR/JSTR, Text is UTF-8 encoded (WIDESTRING).\n\n It is generally accepted as unwise to send any character below a space (0x20): this includes line feeds, carriage\nreturns & control characters. The maximum number of characters is 224 per message including the null-terminator (so\nreally only 223 characters), any longer and it becomes trimmed by Battle.net.\n\n If you send a line feed and/or a carriage return, Battle.net disconnects you and IP bans you for 5 minutes.\n\n',
                    'source': 'C',
                    'type': 'SID'},
               16: {'args': [],
                    'id': 16,
                    'name': 'LEAVECHAT',
                    'remark': '\nLeaves chat mode but does not disconnect. Generally sent when entering a game. This is also sent by D2DV/D2XP when\nswitching characters, and by all products when logging off.\n\n After you send this, normal chat functions to not work. In order to enter a channel when you are not in chat mode, you\nmust send SID_JOINCHANNEL.\n\n',
                    'source': 'C',
                    'type': 'SID'},
               18: {'args': [],
                    'id': 18,
                    'name': 'LOCALEINFO',
                    'remark': '\nSent prior to a disconnect along with SID_MESSAGEBOX to indicate that the client has flooded off. \n\n',
                    'source': 'C',
                    'type': 'SID'},
               20: {'args': [('DWORD', '', 'Ad ID'),
                             ('DWORD', '', 'File extension'),
                             ('FILETIME', '', 'Local file time'),
                             ('STRING', '', 'Filename'),
                             ('STRING', '', 'Link URL')],
                    'id': 20,
                    'name': 'UDPPINGRESPONSE',
                    'remark': '\nContains information needed to download and display an ad banner. \n\n',
                    'source': 'C',
                    'type': 'SID'},
               21: {'args': [('DWORD', '', 'Platform ID'),
                             ('DWORD', '', 'Product ID'),
                             ('DWORD', '', 'ID of last displayed banner'),
                             ('DWORD', '', 'Current time')],
                    'id': 21,
                    'name': 'CHECKAD',
                    'remark': '\nRequests ad banner information from Battle.net.\n\n Official clients send this packet every 20 seconds (give or take). You do not have to send this at all.\n\n In addition, Battle.net will not reply unless any of the fields above are updated from the last time you checked. If\nyou have never checked before, Battle.net will always reply back.\n\n',
                    'source': 'C',
                    'type': 'SID'},
               22: {'args': [('DWORD', '', 'Ad ID'),
                             ('DWORD', '', 'Request type')],
                    'id': 22,
                    'name': 'CLICKAD',
                    'remark': "\nThe clients send this when an ad is clicked.\n\n Request Type is 0 if the client used SID_QUERYADURL to get the ad's data, 1 otherwise. \n\n",
                    'source': 'C',
                    'type': 'SID'},
               26: {'args': [('DWORD', '', 'Status')],
                    'id': 26,
                    'name': 'STARTADVEX2',
                    'remark': '\nPossible values for Status: 0x00: Ok 0x01: Failed\n\n',
                    'source': 'C',
                    'type': 'SID'},
               28: {'args': [('DWORD', '', 'Game State'),
                             ('DWORD', '', 'Game Uptime in seconds'),
                             ('WORD', '', 'Game Type'),
                             ('WORD', '', 'Sub Game Type'),
                             ('DWORD',
                              '',
                              'Provider Version Constant (0xFF)'),
                             ('DWORD', '', 'Ladder Type'),
                             ('STRING', '', 'Game Name'),
                             ('STRING', '', 'Game Password'),
                             ('STRING', '', 'Game Statstring')],
                    'id': 28,
                    'name': 'STARTADVEX3',
                    'remark': '\nUsed by clients to inform the server that a game has been created, or that the state of a created game has changed.\n Bitwise flags for State: 0x01: Game is private 0x02: Game is full 0x04: Game contains players (other than creator)\n0x08: Game is in progress 0x80: Game is a replay Possible values for Game Type (Sub Game Type): 0x02: Melee 0x03: Free\nfor All 0x04: 1 vs 1 0x05: Capture The Flag 0x06: Greed (Resources, 0x01: 2500, 0x02: 500, 0x03: 7500, 0x04: 10000)\n0x07: Slaughter (Minutes, 0x01: 15, 0x02: 30, 0x03: 45, 0x04: 60) 0x08: Sudden Death 0x09: Ladder (Disconnects, 0x00:\nNot a loss, 0x01: Counts as a loss) 0x0A: Use Map Settings 0x0B: Team Melee (Number Of Teams, 0x01: 2 Teams, 0x02: 3\nTeams, etc.) 0x0C: Team Free For All (Number Of Teams, 0x01: 2 Teams, 0x02: 3 Teams, etc.) 0x0D: Team Capture The Flag\n(Number Of Teams, 0x01: 2 Teams, 0x02: 3 Teams, etc.) 0x0F: Top vs. Bottom (Number Of Teams, 1-7 specifies the ratio of\nplayers belonging to both teams) 0x10: Iron Man Ladder (W2BN only) 0x20: PGL \n Provider Version Constant: The Current version of the game (1.16.1) uses 0xFF, previous versions have used 0x1F, but\nthis may vary depending on game version.\n\n Possible values for Ladder: 0x00: Game is Normal (Non-Ladder) 0x01: Game is Ladder 0x03: Game is Iron Man Ladder (W2BN\nonly) It could be that the ladder is bitwise as well, and that 0x02 means Iron Man and 0x03 just means Iron Man +\nLadder.\n Sub Game Type appears to be 0x01 for all game types except Top vs Bottom, where it seems to depend on the size of each\nteam. More research will be needed to confirm.\n\n',
                    'source': 'C',
                    'type': 'SID'},
               42: {'args': [('DWORD', '', '[5] Hashed password'),
                             ('STRING', '', 'Username')],
                    'id': 42,
                    'name': 'CREATEACCOUNT',
                    'remark': '\nCreates an account.\n\n Usernames longer than 15 characters are truncated, and the password is only hashed once (unlike SID_LOGONRESPONSE).\n\n This packet is identical to SID_CREATEACCOUNT2, but the response is limited to success/fail. Developers who wish to\nprovide a reason for account creation failure should use SID_CREATEACCOUNT2.\n\n Currently, SID_CREATEACCOUNT2 may be used with any product, but the protocol-correct packet to use depends on the\nproduct you are emulating.\n\n',
                    'source': 'C',
                    'type': 'SID'},
               43: {'args': [('DWORD', '', 'Request ID'),
                             ('DWORD', '', 'Unknown'),
                             ('FILETIME', '', 'Last update time'),
                             ('STRING', '', 'Filename')],
                    'id': 43,
                    'name': 'SYSTEMINFO',
                    'remark': '\nContains the latest filetime for the requested file. If the file does not exist, the returned filetime is null.\n\n',
                    'source': 'C',
                    'type': 'SID'},
               51: {'args': [('DWORD', '', 'Request ID'),
                             ('DWORD', '', 'Unknown'),
                             ('STRING', '', 'Filename')],
                    'id': 51,
                    'name': 'GETFILETIME',
                    'remark': '\nThis packet seems to request the current filetime for the specified file. Purpose of first 2 DWORDs is unknown,\nhowever, both are echoed back to the client by Battle.net and do not seem to affect the reply. Because of this it is\nreasonable to assume that first DWORD at least is a request ID of some kind. This is called into question, however, by\nthe fact that the replying packet also contains the requested filename. The game (STAR/SEXP) always sends the same\nnumber in DWORD 1 for the file in question. DWORD 2 seems to be null.\n\n Known codes for DWORD 1: 0x01: tos_usa.txt\n 0x03: bnserver-WAR3.ini\n 0x1A: tos_USA.txt\n 0x1B: bnserver.ini\n 0x1D: icons_STAR.bni\n 0x80000005: IX86ExtraWork.mpq\n 0x80000004: bnserver-D2DV.ini\n\n',
                    'source': 'C',
                    'type': 'SID'},
               52: {'args': [('DWORD', '', 'Unused (0)'),
                             ('DWORD', '', 'Unused (0)'),
                             ('STRING', '', 'Unknown (empty)')],
                    'id': 52,
                    'name': 'QUERYREALMS',
                    'remark': '\nRequests a realm listing.\n\n This packet is no longer used. SID_QUERYREALMS2 is used instead.\n\n',
                    'source': 'C',
                    'type': 'SID'},
               58: {'args': [('DWORD', '', 'Client Token'),
                             ('DWORD', '', 'Server Token'),
                             ('DWORD', '', '[5] Password Hash'),
                             ('STRING', '', 'Username')],
                    'id': 58,
                    'name': 'LOGONRESPONSE2',
                    'remark': '\nThis packet is the same as SID_LOGONRESPONSE, but has additional response codes.\n\n',
                    'source': 'C',
                    'type': 'SID'},
               61: {'args': [('DWORD', '', '[5] Password hash'),
                             ('STRING', '', 'Username')],
                    'id': 61,
                    'name': 'CREATEACCOUNT2',
                    'remark': '\nCreates a Battle.net account. Usernames longer than 15 characters are truncated.\n\n Passwords should be converted to lower case before hashing, and are only hashed once (unlike SID_LOGONRESPONSE).\n\n',
                    'source': 'C',
                    'type': 'SID'},
               62: {'args': [('DWORD', '', 'Client Token'),
                             ('DWORD', '', '[5] Hashed realm password'),
                             ('STRING', '', 'Realm title')],
                    'id': 62,
                    'name': 'LOGONREALMEX',
                    'remark': '\nRealm password is always "password". The password hash is created the same way the hash is for logging on to an\naccount.\n\n',
                    'source': 'C',
                    'type': 'SID'},
               64: {'args': [],
                    'id': 64,
                    'name': 'QUERYREALMS2',
                    'remark': '\nRequests a realm listing.\n\n',
                    'source': 'C',
                    'type': 'SID'},
               70: {'args': [('DWORD', '', 'News timestamp')],
                    'id': 70,
                    'name': 'NEWS',
                    'remark': "\nRequests news and MOTD from battle.net.\n\n The news timestamp specifies the starting date for the news. To retrieve all available news entries, set this to zero.\nTimestamps are given in C/Unix format -- that is, the number of seconds since January 1, 1970 0:00:00.000 -- and should\nbe biased to UTC.\n\n This message should be sent when you receive SID_ENTERCHAT. The official client stops processing messages after the\nuser joins a game or enters a channel, and discards messages with more than 127 entries.\n\n News can be requested for older products, but Battle.net will only return the server's Message-of-the-Day. However,\nthis behavior has not been observed in official clients, and for an accurate protocol emulation, its use is not\nrecommended.\n\n",
                    'source': 'C',
                    'type': 'SID'},
               75: {'args': [('WORD', '', 'Game type'),
                             ('WORD', '', 'Length'),
                             ('STRING', '', 'Work returned data')],
                    'id': 75,
                    'name': 'EXTRAWORK',
                    'remark': '\nResponse for both SID_OPTIONALWORK and SID_REQUIREDWORK.\n\n Game type:\n 0x01: Diablo II 0x02: Warcraft III 0x03: Starcraft 0x04: World of Warcraft (Reason for this is not known, but most\nrecent libraries have included it) \n Length:The length is returned from the call to ExtraWork in the ExtraWork DLL. Traditionally, the library responsible\nfor all ExtraWork requests has been IX86ExtraWork.dll. Work returned data:This data is based on a 1024-byte buffer. The\ncall to ExtraWork takes in a structure and returns the length and buffer based on the game type.\n\n',
                    'source': 'C',
                    'type': 'SID'},
               80: {'args': [('DWORD', '', 'Protocol ID (0)'),
                             ('DWORD', '', 'Platform ID'),
                             ('DWORD', '', 'Product ID'),
                             ('DWORD', '', 'Version Byte'),
                             ('DWORD', '', 'Product language'),
                             ('DWORD',
                              '',
                              'Local IP for NAT compatibility'),
                             ('DWORD', '', 'Time zone bias'),
                             ('DWORD', '', 'Locale ID'),
                             ('DWORD', '', 'Language ID'),
                             ('STRING', '', 'Country abreviation'),
                             ('STRING', '', 'Country')],
                    'id': 80,
                    'name': 'AUTH',
                    'remark': "\nSends information about the Client to Battle.net.\n\n *These fields can be set to zero without breaking logon.\n\n Protocol ID:Battle.net's current Protocol ID is 0. Platform ID:A DWORD specifying the client's platform (IX86, PMAC,\nXMAC, etc). Product ID:A DWORD specifying the client's game. Version:The client's version byte. Product Language:This\nfield is under investigation. It can safely be set to 0. MPQ Locale ID:This field is part of Blizzards multi-lingual MPQ\nsystem. Is used to specify which version of an MPQ should be used when the MPQ is available in multiple languages. Local\nIP:This is the local network IP of the client, in network byte order. Timezone bias:The difference, in minutes, between\nUTC and local time. The client calculates this value by subtracting the Local Time from the System Time, having\nconverted both to Filetime structures, and then converting the resultant offset to minutes by diving it by 600,000,000.\nIf you wish to understand the mechanism involved, read Microsoft's documentation on File times. Language ID, Country\nAbbreviation, and Country:These values can be retrieved by querying the system's locale information. Language ID can be\nretrieved using the GetUserDefaultLangID [8] API.\n Country Abbreviation & Country can be retrieved using the GetLocaleInfo [9] API to request the LOCALE_SABBREVCTRYNAME\nand LOCALE_SENGCOUNTRY, respectively.\n\n",
                    'source': 'C',
                    'type': 'SID'},
               81: {'args': [('DWORD', '', 'Client Token'),
                             ('DWORD', '', 'EXE Version'),
                             ('DWORD', '', 'EXE Hash'),
                             ('DWORD',
                              '',
                              'Number of CD-keys in this packet'),
                             ('BOOLEAN', '', 'Spawn CD-key '),
                             ('DWORD',
                              '',
                              "Key Length (DWORD) CD-key's product value (DWORD) CD-key's public value (DWORD) Unknown (0)"),
                             ('DWORD', '', '[5] Hashed Key Data'),
                             ('STRING', '', 'Exe Information'),
                             ('STRING', '', 'CD-Key owner name ')],
                    'id': 81,
                    'name': 'AUTH',
                    'remark': "\nContains the EXE Version and Hash as reported by CheckRevision(), and CDKey values. Spawn may only be used for STAR and\nW2BN.\n\n The data that should be hashed for 'Hashed Key Data' is:\n\n\t* Client Token\n\t* Server Token\n\t* Key Product (from decoded CD key)\n\t* Key Public (from decoded CD key)\n\t* (DWORD) 0\n\t* Key Private (from decoded CD key)\n\n The data that should be used for EXE Information should be separated by one space, in the format of:\n\n\t* EXE Name (like war3.exe)\n\t* Last Modified Date (like 08/16/09)\n\t* Last Modified Time (like 19:21:59)\n\t* Filesize in bytes (like 471040)\n\nAn example of a valid string would be:\n war3.exe 08/16/09 19:21:59 471040 \n * The CD Key owner name must be no greater than 15 characters, otherwise it becomes trimmed by Battle.net.\n\n ** This BOOLEAN value is actually a DWORD, not a BYTE. You will be IP-banned for 5 minutes if you assume BYTE and not\nuse the proper DWORD. Also, this value can only be TRUE for Starcraft, Japan Starcraft and Warcraft II only. Any other\ngame will cause unexpected results.\n\n",
                    'source': 'C',
                    'type': 'SID'}}},
 'S': {'BNLS': {16: {'args': [('DWORD', '', 'Product'),
                              ('DWORD', '', 'Version byte')],
                     'id': 16,
                     'name': 'REQUESTVERSIONBYTE',
                     'remark': '\nOn failure, Product is 0. On success, this is equal to the requested Product.\n\n If Product is 0, the Version byte DWORD is not included in the message.\n\n Possible values for Product:\n\n 0x01: Starcraft\n 0x02: Starcraft Brood War\n 0x03: Warcraft II Battle.net Edition\n 0x04: Diablo II\n 0x05: Diablo II: Lord of Destruction\n 0x06: Starcraft Japanese\n 0x07: Warcraft III\n 0x08: Warcraft III: The Frozen Throne\n\n JBLS adds these products:\n\n 0x09: Diablo Retail\n 0x0A: Diablo Shareware\n 0x0B: Starcraft Shareware\n\n BNLS# adds this product:\n\n 0x0C: Warcraft III: Demo\n\n',
                     'source': 'S',
                     'type': 'BNLS'},
                17: {'args': [('BOOLEAN', '', 'Success '),
                              ('DWORD', '', 'Version'),
                              ('DWORD', '', 'Checksum'),
                              ('STRING', '', 'Version check stat string'),
                              ('DWORD', '', 'Cookie'),
                              ('DWORD',
                               '',
                               'The latest version code for this product')],
                     'id': 17,
                     'name': 'VERIFYSERVER',
                     'remark': '\n* Success is TRUE if successful, FALSE otherwise. If this is FALSE, the next DWORD is the provided cookie, following\nwhich the message ends. Do not mistake this value for a BYTE, it is actually a DWORD.\n\n',
                     'source': 'S',
                     'type': 'BNLS'},
                26: {'args': [('BOOLEAN', '', 'Success '),
                              ('DWORD', '', 'Version'),
                              ('DWORD', '', 'Checksum'),
                              ('STRING', '', 'Version check stat string'),
                              ('DWORD', '', 'Cookie'),
                              ('DWORD',
                               '',
                               'The latest version code for this product')],
                     'id': 26,
                     'name': 'VERSIONCHECKEX2',
                     'remark': '\n* Success is TRUE if successful, FALSE otherwise. If this is FALSE, the next DWORD is the provided cookie, following\nwhich the message ends. Do not mistake this value for a BYTE, it is actually a DWORD.\n\n',
                     'source': 'S',
                     'type': 'BNLS'}},
       'D2GS': {16: {'args': [('BYTE', '', 'Unknown'),
                              ('DWORD', '', 'Player ID'),
                              ('BYTE', '', 'Movement Type'),
                              ('BYTE', '', 'Destination Type'),
                              ('DWORD', '', 'Object ID'),
                              ('WORD', '', 'X Coordinate'),
                              ('WORD', '', 'Y Coordinate')],
                     'id': 16,
                     'name': 'CHARTOOBJ',
                     'remark': "\nA character moves to an object within your view range.\n\n * - These are what the player is moving to.\n\n Possible values for Destination Type:\n 0x00 - Another player\n 0x01 - NPC or Monster\n 0x02 - Object such as Stash, Waypoint, or a Town Portal\n 0x04 - Item\n 0x05 - Doorway\n\n Possible value for Movement Type:\n\n 0x18 - Run\n 0x00 - Walk Please note: This message's official name is not known, and has been invented.\n\n",
                     'source': 'S',
                     'type': 'D2GS'},
                25: {'args': [('BYTE', '', 'Amount')],
                     'id': 25,
                     'name': 'SMALLGOLDPICKUP',
                     'remark': "\nSent when you pick up a BYTE (255) of gold(254 or less).\n\n Please note: This message's official name is not known, and has been invented.\n\n",
                     'source': 'S',
                     'type': 'D2GS'},
                29: {'args': [('BYTE', '', 'Attribute'),
                              ('BYTE', '', 'Amount')],
                     'id': 29,
                     'name': 'SETBYTEATTR',
                     'remark': "\nSets the current (base) amount of the specified attribute.\n\n Note: Since these are only base amounts, items that give increase/decrease the attribute should be added/subtracted\nto/from the base value sent in the message.\n\n Possible Attributes:\n\n 0x00 - Strength \n 0x01 - Energy \n 0x02 - Dexterity \n 0x03 - Vitality \n 0x04 - Stat remaining \n 0x05 - Skill remaining \n 0x0C - Level \n 0x0D - Experience \n 0x0E - Gold on Person \n 0x0F - Gold in Stash \n 0x10 - Defense \n 0x11 - Max Attack Damage \n 0x12 - Min Attack Damage \n 0x13 - Attack Rating \n 0x15 - Min Attack Damage \n 0x16 - Max Attack Damage \n 0x19 - Damage \n 0x1f - Defense \n 0x27 - Fire Resistance \n 0x28 - +Max Fire Resistance \n 0x29 - Cold Resistance \n 0x2A - +Max Cold Resistance \n 0x2B - Lightning Resistance \n 0x2C - +Max Lightning Resistance \n 0x2D - Poison Resistance \n 0x2E - +Max poison Resistance \n 0x31 - Add Fire Damage \n 0x33 - Add Lightning damage \n 0x35 - Add Damage for Weapon/Items probably (one of these may be cold damage) \n 0x37 - Add Damage for Weapon/Items probably (one of these may be cold damage) \n 0x3A - Add Poison Damage \n 0x4C - Add Max Health for Weapon/Items probably \n 0x4D - Add Max Mana for Weapons/Items probably \n 0xA2 - Add Max Stamina for Weapons/Items probably \n 0xA3 - Add Max Stamina for Weapons/Items probably \n 0xAB - Add to Defense\n\n Please note: This message's official name is not known, and has been invented.\n\n",
                     'source': 'S',
                     'type': 'D2GS'},
                30: {'args': [('BYTE', '', 'Attribute'),
                              ('WORD', '', 'Amount')],
                     'id': 30,
                     'name': 'SETWORDATTR',
                     'remark': "\nSets the current (base) amount of the specified attribute.\n\n Note: Since these are only base amounts, items that give increase/decrease the attribute should be added/subtracted\nto/from the base value sent in the message.\n\n For attributes, see D2GS_SETBYTEATTR.\n\n Please note: This message's official name is not known, and has been invented.\n\n",
                     'source': 'S',
                     'type': 'D2GS'},
                31: {'args': [('BYTE', '', 'Attribute - D2GS_SETWORDATTR'),
                              ('DWORD', '', 'Amount')],
                     'id': 31,
                     'name': 'SETDWORDATTR',
                     'remark': "\nUpdates an attribute and sets it to the value sent, 4 bytes max.\n\n Please note: This message's official name is not known, and has been invented. \n\n",
                     'source': 'S',
                     'type': 'D2GS'},
                81: {'args': [('BYTE',
                               '',
                               'Object Type - Any information appreciated'),
                              ('DWORD', '', 'Object ID'),
                              ('WORD', '', 'Object unique code'),
                              ('WORD', '', 'X Coordinate'),
                              ('WORD', '', 'Y Coordinate'),
                              ('BYTE', '', 'State '),
                              ('BYTE', '', 'Interaction Condition')],
                     'id': 81,
                     'name': 'WORLDOBJECT',
                     'remark': "\nServer-assigned coordinate, object ID, and state/interaction properties.\n\n States:\n 0x00 - Object's state can be changed. (Confirm?)\n 0x02 - Object's state cannot be changed with (0x13) interaction. (Confirm?)\n\n Interaction Conditions:\n 0x00 - General object. E.G.: Stash, chests, etc.\n 0x01 - Refresh shrine\n 0x02 - Health shrine\n 0x05 - Chest will catch fire (upon interaction)\n 0x08 - Monster contained within chest (sarcophagus)\n 0x0D - Mana recharge shrine\n 0x0E - Stamina shrine\n 0x0F - Experience shrine\n 0x13 - Fire shrine\n 0x80 - Chest is locked (State will be 0)\n\n *If this value is 0, expect no packet 0x0E (status) to follow, if 2, then there will be.\n\n Please note: This message's official name is not known, and has been invented.\n\n",
                     'source': 'S',
                     'type': 'D2GS'},
                119: {'args': [('BYTE', '', 'Request Type')],
                      'id': 119,
                      'name': 'TRADEACTION',
                      'remark': "\nA character is trading with you.\n\n Possible Request Type values:\n 0x01 - Player requests trade initiation\n 0x05 - Player presses 'Accept'\n 0x06 - 'Accept' button disabled for both players\n 0x09 - Out of inventory space\n 0x0C - Player cancels trade\n 0x0D - You accepted the trade agreement\n 0x0E - Your 'Accept' button is disabled\n 0x0F - 'Accept' buttons re-enabled Please note: This message's official name is not known, and has been invented.\n\n",
                      'source': 'S',
                      'type': 'D2GS'},
                122: {'args': [('DWORD',
                                '',
                                'Unknown - Possible acceptance/request ID')],
                      'id': 122,
                      'name': 'LOGONRESPONSE',
                      'remark': "\nThis message is originally received compressed, so the message ID will correspond with D2GS compressed format.\n\n This message is received if your logon is accepted by the D2GS.\n\n Please note: This message's official name is not known, and has been invented. \n\n",
                      'source': 'S',
                      'type': 'D2GS'},
                137: {'args': [('BYTE', '', 'EventId // see below,')],
                      'id': 137,
                      'name': 'UNIQUEEVENTS',
                      'remark': "\nI'm sure there are many others by looking at the gaps here.\n\n Note1: Unsure what to name this any suggestions will be taken into account.\n Note2: This seems to relate to various events that relate directly or indirectly to key quest states//events.\n\n",
                      'source': 'S',
                      'type': 'D2GS'},
                175: {'args': [],
                      'id': 175,
                      'name': 'STARTLOGON',
                      'remark': "\nPermission to initiate Game Server Logon.\n\n * - Although this packet is blank, the data received will still be compressed. Meaning the actual message size will be\ntwo bytes in length. (See [Sizes & Types]) Please note: This message's official name is not known, and has been\ninvented.\n\n",
                      'source': 'S',
                      'type': 'D2GS'}},
       'MCP': {2: {'args': [('DWORD', '', 'Result')],
                   'id': 2,
                   'name': 'CHARCREATE',
                   'remark': '\nThe return value for character creation.\n  Known values: 0x00: Success 0x14: Character already exists, or maximum number of characters (currently 8) reached.\n0x15: Invalid name \n\n',
                   'source': 'S',
                   'type': 'MCP'},
               3: {'args': [('WORD', '', 'Request Id'),
                            ('WORD', '', 'Game token'),
                            ('WORD', '', 'Unknown (0)'),
                            ('DWORD', '', 'Result')],
                   'id': 3,
                   'name': 'CREATEGAME',
                   'remark': '\n Result: 0x00: Game creation succeeded. This does NOT automatically join the game - the client must also send packet\nMCP_JOINGAME. 0x1E: Invalid game name. 0x1F: Game already exists. 0x20: Game servers are down. 0x6E: A dead hardcore\ncharacter cannot create games. \n\n',
                   'source': 'S',
                   'type': 'MCP'},
               4: {'args': [('WORD', '', 'Request ID'),
                            ('WORD', '', 'Game token'),
                            ('WORD', '', 'Unknown (0)'),
                            ('DWORD', '', 'IP of D2GS Server'),
                            ('DWORD', '', 'Game hash'),
                            ('DWORD', '', 'Result')],
                   'id': 4,
                   'name': 'JOINGAME',
                   'remark': '\n Possible values for result: 0x00: Game joining succeeded. In this case, Diablo 2 terminates the connection with the\nMCP and initiates the connection with the D2GS. 0x29: Password incorrect. 0x2A: Game does not exist. 0x2B: Game is full.\n0x2C: You do not meet the level requirements for this game. 0x6E: A dead hardcore character cannot join a game. 0x71: A\nnon-hardcore character cannot join a game created by a Hardcore character. 0x73: Unable to join a Nightmare game. 0x74:\nUnable to join a Hell game. 0x78: A non-expansion character cannot join a game created by an Expansion character. 0x79:\nA Expansion character cannot join a game created by a non-expansion character. 0x7D: A non-ladder character cannot join\na game created by a Ladder character. \n\n',
                   'source': 'S',
                   'type': 'MCP'},
               5: {'args': [('WORD', '', 'Request Id'),
                            ('DWORD', '', 'Index'),
                            ('BYTE', '', 'Number of players in game'),
                            ('DWORD', '', 'Status'),
                            ('STRING', '', 'Game name'),
                            ('STRING', '', 'Game description')],
                   'id': 5,
                   'name': 'GAMELIST',
                   'remark': "\nInstead of receiving a single response that has a list of all the games, the client will receive this packet once for\nevery game listed by the server.\n  Request Id: Like a cookie. This value will be whatever you sent the server in MCP_GAMELIST. Index: The game's index\non the server. Number of players in game: Self explanatory. Status: 0x00300004: Game is available to join 0xFFFFFFFF:\nServer is down \n\n",
                   'source': 'S',
                   'type': 'MCP'},
               6: {'args': [('WORD', '', 'Request ID'),
                            ('DWORD', '', 'Status '),
                            ('DWORD', '', 'Game Uptime (seconds)'),
                            ('WORD', '', 'Unknown'),
                            ('BYTE', '', 'Maximum players allowed'),
                            ('BYTE',
                             '',
                             'Number of characters in the game'),
                            ('BYTE',
                             '',
                             '[16] Classes of ingame characters '),
                            ('BYTE',
                             '',
                             '[16] Levels of ingame characters '),
                            ('BYTE', '', 'Unused (0)'),
                            ('STRING', '', '[16] Character names ')],
                   'id': 6,
                   'name': 'GAMEINFO',
                   'remark': '\n* Usually 0x00300004, but rarely 0. If it is 0, the packet contains no useful information and the server is probably\ndown.\n\n ** Internally, there are 16 character slots, but the last 8 are always empty. \n This value sometimes includes some empty character slots. \n Then, some empty strings are added to the end of the packet. \n To determine the number of characters really in the game: \n\n CharsInGameReal = CharsInGameFake - AmountOfEmptyCharNames;\n\n Byte N here refers to character in slot N, or 0 if the slot is empty.\n\n',
                   'source': 'S',
                   'type': 'MCP'},
               7: {'args': [('DWORD', '', 'Result')],
                   'id': 7,
                   'name': 'CHARLOGON',
                   'remark': '\nLogon response.\n  Known values: 0x00: Success 0x46: Player not found 0x7A: Logon failed 0x7B: Character expired \n\n',
                   'source': 'S',
                   'type': 'MCP'},
               10: {'args': [('DWORD', '', 'Result')],
                    'id': 10,
                    'name': 'CHARDELETE',
                    'remark': "\nDeletion response.\n  Known values:   (Diablo II v1.10 or later) 0x00: Success 0x49: Character doesn't exist   (Diablo II v1.09 or earlier)\n0x00: Character doesn't exist 0x49: Success   \n\n",
                    'source': 'S',
                    'type': 'MCP'},
               17: {'args': [('BYTE', '', 'Ladder type'),
                             ('WORD',
                              '',
                              'Total response size (WORD) Current message size (WORD) Total size of unreceived messages'),
                             ('WORD',
                              '',
                              'Rank of first entry (WORD) Unknown (0) Message data: (DWORD)Number of entries (DWORD)Unknown (0x10) For each'),
                             ('QWORD',
                              '',
                              'Character experience (BYTE) Character Flags (BYTE) Character title (WORD) Character level (BYTE) [16]')],
                    'id': 17,
                    'name': 'REQUESTLADDERDATA',
                    'remark': "\n Total Response Size: The size of the entire batch of SID_REQUESTLADDERDATA messages, excluding their headers and first\nbytes. Current Message Size: The size of the current message, excluding its header and first byte. Total size of\nunreceived messages: The total size of all the unreceived messages in the batch, excluding their headers and first\nbytes. In the last packet, this value is 0, since there are no unreceived messages. Rank of first entry: Always zero,\nexcept in the last message. In the last message, this specifies the zero-based rank of the first entry. (For example if\nthis is 17 in the last packet, then ladder entries 18-33 were retrieved.) Character Flags: 0x00: Amazon 0x01: Sorceress\n0x02: Necromancer 0x03: Paladin 0x04: Barbarian 0x05: Druid 0x06: Assassin   +0x60 to this field if it's a living\nhardcore character. +0x70 to this field if it's a dead hardcore character. The character is softcore by default.  \nCharacter Name: The character name is always 16 bytes. If the name is shorter than 16 bytes, the string is padded with\nnulls. The last byte is always null, since character names are limited to 15 chars. General Remarks: The server may\nrespond to this packet with one or more of these messages. The client must not handle the data until the last packet in\nthe batch is received. The messages' data should be concatenated backwards. For example, if 3 packets were received,\nthen the data buffer should contain the data of the 3rd packet, followed by the data of the 2nd packet, followed by the\ndata of the 1st packet. Only after the last packet was received, the data buffer should be parsed. IMPORTANT NOTE: If\nthe entry is the last entry in the packet, the character name might be smaller than 16 bytes.In this case, the client\nMUST add null bytes to the end of the packet, BEFORE adding it to the data buffer. Ladder packets are NOT SENT IN ANY\nORDER - They are often sent completely out of order and must be placed back into the proper order. You have to infer the\nsequencing based on the 'how big' fields in the 10 byte header.\n\n",
                    'source': 'S',
                    'type': 'MCP'},
               18: {'args': [('BYTE', '', 'Unknown'),
                             ('STRING', '', 'MOTD')],
                    'id': 18,
                    'name': 'MOTD',
                    'remark': "\nContains the realm's MOTD. The Byte at the beginning is apparently ignored.\n\n",
                    'source': 'S',
                    'type': 'MCP'},
               20: {'args': [('DWORD', '', 'Position')],
                    'id': 20,
                    'name': 'CREATEQUEUE',
                    'remark': '\nPosition in line to create a game.\n\n',
                    'source': 'S',
                    'type': 'MCP'},
               23: {'args': [('WORD',
                              '',
                              'Number of characters requested'),
                             ('DWORD',
                              '',
                              'Number of characters that exist on this account'),
                             ('WORD', '', 'Number of characters returned'),
                             ('STRING',
                              '',
                              'Character name (STRING) Character statstring')],
                    'id': 23,
                    'name': 'CHARLIST',
                    'remark': '\nLists characters.\n\n The statstrings in this packet do not contain the product or character name. Everything else is the same as a\ncharacter statstring you would receive from a character entering the channel.\n\n',
                    'source': 'S',
                    'type': 'MCP'},
               24: {'args': [('DWORD', '', 'Result')],
                    'id': 24,
                    'name': 'CHARUPGRADE',
                    'remark': '\nConverts a non-expansion character to expansion.\n  Known return values: 0x00: Success 0x46: Character not found 0x7A: Upgrade failed 0x7B: Character is expired 0x7C:\nAlready expansion character \n\n',
                    'source': 'S',
                    'type': 'MCP'},
               25: {'args': [('WORD',
                              '',
                              'Number of characters requested'),
                             ('DWORD',
                              '',
                              'Number of characters that exist on this account'),
                             ('WORD', '', 'Number of characters returned'),
                             ('DWORD',
                              '',
                              'Expiration Date (STRING) Character name (STRING) Character statstring')],
                    'id': 25,
                    'name': 'CHARLIST2',
                    'remark': '\nLists characters.\n\n The expiration date is a second count. To determine when the character will expire, add this time to January 1\n00:00:00 UTC 1970 and determine the difference between that value and now (all in seconds).\n\n The statstrings in this packet do not contain the product or character name. Everything else is the same as a\ncharacter statstring you would receive from a character entering the channel.\n\n',
                    'source': 'S',
                    'type': 'MCP'}},
       'SID': {0: {'args': [],
                   'id': 0,
                   'name': 'NULL',
                   'remark': '\nKeeps the connection alive. Clients do not need to respond to this message.\n\n',
                   'source': 'S',
                   'type': 'SID'},
               4: {'args': [('DWORD', '', 'Server version'),
                            ('STRING', '[]', 'Server list')],
                   'id': 4,
                   'name': 'SERVERLIST',
                   'remark': '\nClient should set the internal Battle.net server list from the contents of this message.\n\n This packet is supported by all Battle.snp games and Diablo II and its expansion.\n\n',
                   'source': 'S',
                   'type': 'SID'},
               5: {'args': [('DWORD', '', 'Number of games'),
                            ('DWORD',
                             '',
                             'Status Otherwise, games are listed thus: For each list item: WARCRAFT III: (DWORD) Game Type'),
                            ('DWORD',
                             '',
                             "Language ID (WORD) Address Family (Always AF_INET) (WORD) Port (DWORD) Host's IP (DWORD) sin_zero (0) (DWORD)"),
                            ('0',
                             '',
                             '(DWORD) Unknown (Public = 0x10, Private = 0x11) (DWORD) Elapsed time (in seconds) (STRING) Game name '),
                            ('STRING',
                             '',
                             'Game password (always empty) (BYTE) Free slots (character representing hexadecimal number) (BYTE)[8] Host'),
                            ('STRING',
                             '',
                             'Encoded map information ALL OTHER CLIENTS: (WORD) Game Type (WORD) Sub Game Type (DWORD) Language'),
                            ('WORD',
                             '',
                             "Address Family (Always AF_INET) (WORD) Port (DWORD) Host's IP (DWORD) sin_zero (0) (DWORD) sin_zero (0)"),
                            ('DWORD',
                             '',
                             'Game Status (DWORD) Elapsed time (in seconds) (STRING) Game name * (STRING) Game password (STRING) Game')],
                   'id': 5,
                   'name': 'CLIENTID',
                   'remark': '\nReturns a list of available games and their information. Varies depending on product.\n\n * This field is UTF-8 encoded.\n\n For WarCraft III, map information is encoded using the function found here [3]:\n Encoded data: (DWORD) Map Flags (BYTE) Map Null 1 (BYTE) Map Width (playable area) (BYTE) Map Null 2 (BYTE) Map Height\n(playable area) (BYTE) Map Null 3 (DWORD) Map CRC (STRING) Map Path (STRING) Game Host (BYTE) Map Unknown (possibly a\nSTRING with just the null terminator) (BYTE)[20] Unknown (probably a SHA1 hash) Possible flags (combine the below\nsettings) for Map Flags: Game Speed (mask 0x00000003, unique) 0x00000000: Slow 0x00000001: Normal 0x00000002: Fast\nVisibility setting (mask 0x00000F00, unique) 0x00000100: Hide Terrain 0x00000200: Map Explored 0x00000400: Always\nVisible 0x00000800: Default Observers setting (mask 0x40003000, unique) 0x00000000: No Observers 0x00002000: Observers\non Defeat 0x00003000: Full Observers 0x40000000: Referees Other advanced host settings (mask 0x07064000, combinable)\n0x00004000: Teams Together (team members are placed at neighbored starting locations) 0x00060000: Lock Teams 0x01000000:\nFull Shared Unit Control 0x02000000: Random Hero 0x04000000: Random Races Non-WarCraft III Game Statstring Field:\n For other clients, game statring follows the format found here [4].\n\n WarCraft III Game Type Field (combine the below settings):\n Game Type (mask 0x000000FF, unique) 0x00000001: Custom 0x00000009: Ladder Map Author (mask 0x00006000, combinable)\n0x00002000: Blizzard 0x00004000: Custom Battle/Scenario (mask 0x00018000, unique) 0x00000000: Battle 0x00010000:\nScenario Map Size (mask 0x000E0000, combinable) 0x00020000: Small 0x00040000: Medium 0x00080000: Huge Observers (mask\n0x00700000, unique) 0x00100000: Allowed observers ("Full Observers" and "Referees" options) 0x00200000: Observers on\ndefeat 0x00400000: No observers Public/Private (mask 0x00000800, unique) 0x00000000: Public game 0x00000800: Private\ngame STAR/SEXP/SSHR/JSTR/W2BN Game Type Field:\n Game Type (unique) 0x01: Custom (WAR3/W3XP) 0x02: Melee 0x03: Free For All 0x04: One vs One 0x05: Capture the Flag\n0x06: Greed 0x07: Slaughter 0x08: Sudden Death 0x09: Ladder 0x10: Iron man ladder (W2BN) 0x0A: Use Map Settings 0x0B:\nTeam Melee 0x0C: Team FFA 0x0D: Team CTF 0x0F: Top vs. Bottom STAR/SEXP/SSHR/JSTR/W2BN Sub Game Type Field:\n For Greed: 0x01: 2500 resources 0x02: 5000 resources 0x03: 7500 resources 0x04: 10000 resources For Slaughter: 0x01:\n15 minutes 0x02: 30 minutes 0x03: 45 minutes 0x04: 60 minutes For Team Melee, Team Free For All, and Team Capture the\nFlag: 0x01: 2 teams 0x02: 3 teams 0x03: 4 teams For Top vs. Bottom: 0x01: 1 v 7 0x02: 2 v 6 0x03: 3 v 5 0x04: 4 v 4\n0x05: 5 v 3 0x06: 6 v 2 0x07: 7 v 1 For Ladder: 0x00: Disconnects do not count as loss 0x01: Disconnects count as loss\nFor Other Game Types: 0x01: No sub-game type DRTL/DSHR Game Type Field:\n Game Type is used to specify a \'level range\'. This ensures that clients receive a list of games containing players\nwhose experience is similar to their own. 0x00: Level 1 0x01: Level 2 or 3 0x02: Level 4 or 5 0x03: Level 6 or 7 0x04:\nLevel 8 or 9 0x05: Level 10 - 12 0x06: Level 13 - 16 0x07: Level 17 - 19 0x08: Level 20 - 24 0x09: Level 25 - 29 0x0A:\nLevel 30 - 34 0x0B: Level 35 - 39 0x0C: Level 40 - 47 0x0D: Level 48 - 50 \n Note that fields from Address Family to sin_zero form a sockaddr_in structure.\n\n Valid status codes:\n This field is the \'Game Status\' for non-WarCraft III and the \'Status\' when no games are listed for both WarCraft III\nand other clients. 0x00: OK 0x01: Game doesn\'t exist 0x02: Incorrect password 0x03: Game full 0x04: Game already started\n0x06: Too many server requests\n\n',
                   'source': 'S',
                   'type': 'SID'},
               10: {'args': [('STRING', '', 'Unique name'),
                             ('STRING', '', 'Statstring'),
                             ('STRING', '', 'Account name')],
                    'id': 10,
                    'name': 'ENTERCHAT',
                    'remark': '\nContains Client product, realm, statstring, and is sent as the response when the client sends SID_ENTERCHAT. Unique\nname is the users unique name in chat (Which may be Arta, Arta#2, Arta#3, etc). Account name is the users account name\n(Which in all 3 previous examples would be Arta).\n\n Once you receive this packet, you are not in a channel, but can join/host games and join channels. Because you are not\nin a channel, you cannot send text messages yet (but you will not be disconnected if you do). See SID_JOINCHANNEL.\n\n',
                    'source': 'S',
                    'type': 'SID'},
               11: {'args': [('STRING',
                              '[]',
                              'Channel names, each terminated by a null string')],
                    'id': 11,
                    'name': 'GETCHANNELLIST',
                    'remark': '\nContains a list of available channels.\n\n For some reason, Diablo II adds extra data to the channel list (as can be seen in game), and older clients list\nblocked channels, such as Warez and Backstage.\n\n',
                    'source': 'S',
                    'type': 'SID'},
               15: {'args': [('DWORD', '', 'Event ID'),
                             ('DWORD', '', "User's Flags"),
                             ('DWORD', '', 'Ping'),
                             ('DWORD', '', 'IP Address (Defunct)'),
                             ('DWORD', '', 'Account number (Defunct)'),
                             ('DWORD',
                              '',
                              'Registration Authority (Defunct)'),
                             ('STRING', '', 'Username'),
                             ('STRING', '', 'Text ')],
                    'id': 15,
                    'name': 'CHATEVENT',
                    'remark': "\nContains all chat events.\n\n For STAR/SEXP/SSHR/JSTR, Text is UTF-8 encoded (WIDESTRING).\n\n * Text should be no longer than 255 characters. Game clients should only be able to send 224 characters.\n Event IDs: [0x01] EID_SHOWUSER: User in channel [0x02] EID_JOIN: User joined channel [0x03] EID_LEAVE: User left\nchannel [0x04] EID_WHISPER: Recieved whisper [0x05] EID_TALK: Chat text [0x06] EID_BROADCAST: Server broadcast [0x07]\nEID_CHANNEL: Channel information [0x09] EID_USERFLAGS: Flags update [0x0A] EID_WHISPERSENT: Sent whisper [0x0D]\nEID_CHANNELFULL: Channel full [0x0E] EID_CHANNELDOESNOTEXIST: Channel doesn't exist [0x0F] EID_CHANNELRESTRICTED:\nChannel is restricted [0x12] EID_INFO: Information [0x13] EID_ERROR: Error message [0x15] EID_IGNORE: Notifies that a\nuser has been ignored (DEFUNCT) [0x16] EID_ACCEPT: Notifies that a user has been unignored (DEFUNCT) [0x17] EID_EMOTE:\nEmote EID_SHOWUSER: This is sent for each user who is already in a channel when you join it, as opposed to EID_JOIN,\nwhich is sent when a user joins a channel you have already joined. It is also sent when logged on using D2XP/D2DV and a\nuser requires an update to their statstring - for example, by logging a different character onto a realm. EID_JOIN: This\nis sent when a user enters the channel you are currently in. EID_LEAVE: This is sent when a user exits the channel you\nare currently in. EID_WHISPER: This is sent when a user whispers you. EID_TALK: This is sent when a user (excluding\nself) in chat speaks. EID_BROADCAST: The username supplied for this event is now always 'Battle.net'. Historically,\nusername contained the name of the Battle.net Administrator who sent the broadcast. EID_CHANNEL: The flags field for\nthis event is used and indicates what special conditions exist for the channel in question. See [Battle.net Flags] for\nmore information. EID_USERFLAGS: This is sent to inform the client of an update to one or more user's flags. Battle.net\nusually sends this event for every user in the channel, even if only one user's flags have changed. This behavior can be\nexploited to detect invisible users, by performing an action (such as an unsquelch) to provoke a flags update. Users\nincluded in the flags update whose presence has not been indicated by EID_JOIN or EID_SHOWUSER can then be added to the\nuserlist as invisible. Care should be taken, however, to account for the possibility that an asynchronous send error has\noccurred. Should an EID_JOIN or EID_SHOWUSER event occur for an invisible user, they should be marked as a normal user,\nnot readded to the userlist. EID_WHISPERSENT: The Flags and Ping fields in this packet is equal to the originating user\n- the one who sent the whisper. In other words, EID_WHISPERSENT contains your flags & ping, not those of the person you\nwhispered. EID_CHANNELDOESNOTEXIST: See info on NoCreate Join in SID_JOINCHANNEL. EID_CHANNELRESTRICTED: This is sent\nwhen attempting to join a channel which your client is not allowed to join. EID_INFO: This is information supplied by\nBattle.net. This text is usually displayed by clients in yellow. EID_Error: This is error information supplied by\nBattle.net. This text is usually displayed by clients in red. EID_Emote: This is sent when any user (including self)\nuses the emote feature in chat.\n\n",
                    'source': 'S',
                    'type': 'SID'},
               23: {'args': [('DWORD', '', 'Style'),
                             ('STRING', '', 'Text'),
                             ('STRING', '', 'Caption')],
                    'id': 23,
                    'name': 'READMEMORY',
                    'remark': "\nDisplays a message to the user. This message's fields are used as parameters for the Win32 API MessageBox [5], and can\nbe passed directly to it. For more information about these parameters, see the documentation for MessageBox [6] at MSDN.\n\n",
                    'source': 'S',
                    'type': 'SID'},
               29: {'args': [],
                    'id': 29,
                    'name': 'LOGONCHALLENGEEX',
                    'remark': "\nNotifies Battle.net that you have left a game. \n\n Please note: This message's official name is not known, and has been invented.\n\n",
                    'source': 'S',
                    'type': 'SID'},
               32: {'args': [('DWORD', '', 'Product ID '),
                             ('DWORD', '', 'Product version'),
                             ('STRING', '', 'Game Name'),
                             ('STRING', '', 'Game Password')],
                    'id': 32,
                    'name': 'ANNOUNCEMENT',
                    'remark': '\nNotifies Battle.net that the client has joined a game. This is what causes you to receive "Your friend _ entered a _\ngame called _." from Battle.net if you are mutual friends with this client.\n\n SID_LEAVECHAT (0x10) does not need to be sent after this, since this does what LEAVECHAT does but with an added\nnotification.\n\n * This can be any valid Product ID, even if you are not connected with that ID.\n\n',
                    'source': 'S',
                    'type': 'SID'},
               35: {'args': [('DWORD', '', 'Number of accounts'),
                             ('DWORD', '', 'Number of keys'),
                             ('STRING', '[]', 'Accounts to update'),
                             ('STRING', '[]', 'Keys to update'),
                             ('STRING', '[]', 'New values')],
                    'id': 35,
                    'name': 'WRITECOOKIE',
                    'remark': "\nUpdates the Client's profile.\n Currently, the allowed keys for this are Sex, Location, and Description. The maximum length for the values is 512,\nincluding the null terminator.\n\n See SID_READUSERDATA for more information.\n\n",
                    'source': 'S',
                    'type': 'SID'},
               40: {'args': [('DWORD', '', 'Result')],
                    'id': 40,
                    'name': 'LOGONCHALLENGE',
                    'remark': '\nResults:\n 0x00: Fail 0x01: Success Reports success/fail on account creation.\n\n',
                    'source': 'S',
                    'type': 'SID'},
               52: {'args': [('DWORD', '', 'Unknown'),
                             ('DWORD', '', 'Count'),
                             ('DWORD',
                              '',
                              'Unknown (STRING) Realm title (STRING) Realm description')],
                    'id': 52,
                    'name': 'QUERYREALMS',
                    'remark': '\nRealm list.\n\n The first Unknown is usually 0. The second [and subsequent] Unknown is usually 1.\n\n This packet is no longer used. SID_QUERYREALMS2 is used instead.\n\n',
                    'source': 'S',
                    'type': 'SID'},
               53: {'args': [('DWORD', '', 'Result'),
                             ('STRING', '', 'Reason')],
                    'id': 53,
                    'name': 'PROFILE',
                    'remark': '\nStatus: 0x00: Success 0x01: Account Does Not Exist 0x02: Invalid Password 0x06: Account Closed \n The string containing the reason is only present when your account is closed. If not, the entire field is omitted\nincluding the null-terminator.\n\n',
                    'source': 'S',
                    'type': 'SID'},
               60: {'args': [('DWORD', '', 'Status'),
                             ('STRING', '', 'Account name suggestion')],
                    'id': 60,
                    'name': 'CHECKDATAFILE2',
                    'remark': '\nAccount creation result.\n Result: 0x00: Account created 0x01: Name is too short 0x02: Name contained invalid characters 0x03: Name contained a\nbanned word 0x04: Account already exists 0x05: Account is still being created 0x06: Name did not contain enough\nalphanumeric characters 0x07: Name contained adjacent punctuation characters 0x08: Name contained too many punctuation\ncharacters\n\n',
                    'source': 'S',
                    'type': 'SID'},
               62: {'args': [('DWORD', '', 'MCP Cookie'),
                             ('DWORD', '', 'MCP Status'),
                             ('DWORD', '', '[2] MCP Chunk 1'),
                             ('DWORD', '', 'IP'),
                             ('DWORD', '', 'Port'),
                             ('DWORD', '', '[12] MCP Chunk 2'),
                             ('STRING', '', 'Battle.net unique name')],
                    'id': 62,
                    'name': 'LOGONREALMEX',
                    'remark': '\nThis packet supplies the data necessary to connect to an MCP server. The cookie value is defined in the first DWORD of\nSID_LOGONREALMEX and is simply returned by Battle.net. If the length of the message (not including header) is greater\nthan 8, the client should continue to logon to the MCP. Otherwise, the Status field is interpreted as an error code:\n\n 0x80000001: Realm is unavailable\n 0x80000002: Realm logon failed\n\n Any other value indicates failure.\n\n The first part of the MCP Chunk that must be sent to the MCP server includes the Status and Cookie DWORDS, making MCP\nChunk 1 the first 4 DWORDS of the packet.\n\n There used to be a WORD at the end of this packet, which was apparently random.\n\n',
                    'source': 'S',
                    'type': 'SID'},
               63: {'args': [('DWORD', '', 'Unknown'),
                             ('DWORD', '', 'Count'),
                             ('DWORD',
                              '',
                              'Unknown (STRING) Realm title (STRING) Realm description')],
                    'id': 63,
                    'name': 'STARTVERSIONING2',
                    'remark': '\nRealm list.\n\n The first Unknown is usually 0. The second [and subsequent] Unknown is usually 1.\n\n',
                    'source': 'S',
                    'type': 'SID'},
               65: {'args': [('BYTE', '', 'Number of entries'),
                             ('DWORD', '', 'Last logon timestamp'),
                             ('DWORD', '', 'Oldest news timestamp'),
                             ('DWORD', '', 'Newest news timestamp'),
                             ('DWORD', '', 'Timestamp (STRING) News')],
                    'id': 65,
                    'name': 'QUERYADURL',
                    'remark': "\nThis packet contains news from battle.net. Timestamps are in C/Unix format, biased for UTC.\n\n Multiple separate news messages can be received. These should be treated the same as if one message was sent with\nseveral news entries.\n\n If the 'Timestamp' field for an entry is zero, then that entry is the message of the day (and not a news entry in the\nnormal respect).\n\n",
                    'source': 'S',
                    'type': 'SID'},
               74: {'args': [('STRING', '', 'MPQ Filename')],
                    'id': 74,
                    'name': 'OPTIONALWORK',
                    'remark': '\nUsing SID_GETFILETIME with request ID 0x80000005, the client should download this file and call the ExtraWork function\ninside of it. Generally, this message is used for the optional ExtraWork DLL.\n\n The client will only execute this entirely if the registry key HKCUSoftwareBattle.netOptimizeSysDesc [REG_DWORD] is\nset to 1.\n\n',
                    'source': 'S',
                    'type': 'SID'},
               76: {'args': [('STRING', '', 'ExtraWork MPQ FileName')],
                    'id': 76,
                    'name': 'REQUIREDWORK',
                    'remark': '\nUsing SID_GETFILETIME with request ID 0x80000006, the client should download the specified MPQ file, extract\nExtraWork.dll and call the ExtraWork function inside of it.\n\n',
                    'source': 'S',
                    'type': 'SID'},
               78: {'args': [('DWORD', '', 'Logon Type'),
                             ('DWORD', '', 'Server Token'),
                             ('DWORD', '', 'UDPValue '),
                             ('FILETIME', '', 'MPQ filetime'),
                             ('STRING', '', 'IX86ver filename'),
                             ('STRING', '', 'ValueString'),
                             ('VOID', '', '128-byte Server signature')],
                    'id': 78,
                    'name': 'TOURNAMENT',
                    'remark': '\nContains the Server Token, and the values used in CheckRevision.\n\n Possible Logon Type values: 0x00: Broken SHA-1 (STAR/SEXP/D2DV/D2XP) 0x01: NLS version 1 (War3Beta) 0x02: NLS Version\n2 (WAR3/W3XP) * UDPValue\n No one really knows what this is, however, it is used in 2nd DWORD of the UDP packet PKT_CONNTEST2. It is also the\nsecond part of MCP Chunk 1 in MCP_STARTUP.\n\n',
                    'source': 'S',
                    'type': 'SID'},
               81: {'args': [('DWORD', '', 'Result'),
                             ('STRING', '', 'Additional Information')],
                    'id': 81,
                    'name': 'AUTH',
                    'remark': "\nReports success/failure on version & CD Key check.\n\n Result:\n 0x000: Passed challenge\n 0x100: Old game version (Additional info field supplies patch MPQ filename)\n 0x101: Invalid version\n 0x102: Game version must be downgraded \n (Additional info field supplies patch MPQ filename)\n 0x0NN: (where NN is the version code supplied in SID_AUTH_INFO): Invalid version code (note that 0x100 is not set in\nthis case).\n 0x200: Invalid CD key *\n 0x201: CD key in use (Additional info field supplies name of user)\n 0x202: Banned key\n 0x203: Wrong product\n The last 4 codes also apply to the second CDKey, as indicated by a bitwise combination with 0x010.\n\n If a patch file cannot be found, additional info is set to 'non-existent'. If either the executable size/date or the\nversion code is wrong, the server will typically return a failure status.\n\n * If you receive this status, official Battle.net servers ban you for 24 hours (as of 06/15/2011). It used to be 2\nweeks, but they changed recently.\n\n More:\n While doing a little research on how Battle.net autoupdates it's clients, I found that it (STAR, anyway) does not use\nthe provisions of the SID_AUTH login system to tell clients which update file to download. Instead, it sends a\nSID_REPORTVERSION (from the previous logon system) containing the equivalent error code and the name of the patch file\nto download. This seems strange, and makes me think that the part of Battle.net responsible for updating clients is\nisolated from the part responsible for processing logon requests. If this is the case, it makes sense that that system\nwas never updated, since it must still support legacy clients. In addition, this would explain why most Blizzard clients\nretain obsolete packet processing code.\n\n",
                    'source': 'S',
                    'type': 'SID'},
               82: {'args': [('DWORD', '', 'Version? (0x010A0027)'),
                             ('DWORD', '', 'Exception code'),
                             ('DWORD', '', 'Unknown'),
                             ('DWORD', '', 'Unknown')],
                    'id': 82,
                    'name': 'AUTH',
                    'remark': '\nWhen the game crashes, (usually) a file named Crashdump is created. If this file exists at the next logon, the contents\nof it are sent to Battle.net in this message.\n\n The first DWORD for Diablo II is a constant value (version?), as seen in Fog.dll.\n\n All calls to Fog_10052 result in the output of Crashdump.\n\n More research is required.\n\n',
                    'source': 'S',
                    'type': 'SID'},
               94: {'args': [],
                    'id': 94,
                    'name': 'WARDEN',
                    'remark': '\nRequests a friends list from Battle.net.\n\n Works for all clients, however D2DV/D2XP will not receive friend updates automatically. For those clients, you must\nrequest the list at your own intervals if you wish to know about any updates.\n\n',
                    'source': 'S',
                    'type': 'SID'},
               102: {'args': [('DWORD', '', 'Result')],
                     'id': 102,
                     'name': 'FRIENDSUPDATE',
                     'remark': '\nContains the return value from MCP Startup.\n  Known return values: 0x02, 0x0A-0x0D: Realm Unavailable: No Battle.net connection detected. 0x7E: CDKey banned from\nrealm play. 0x7F: Temporary IP ban "Your connection has been temporarily restricted from this realm. Please try to log\nin at another time." Else: Success. \n\n',
                     'source': 'S',
                     'type': 'SID'}},
       'W3GS': {1: {'args': [('DWORD', '', 'Checksum')],
                    'id': 1,
                    'name': 'PING',
                    'remark': '\nThis is sent to the server when receiving the status code in BNLS_AUTHORIZE (0x0E).\n\n For more info, see the [BNLS Checksum Algorithm] document.\n\n This message is no longer required. See BNLS_AUTHORIZE for more information.\n\n',
                    'source': 'S',
                    'type': 'W3GS'}}}}
